
USBtoSerial.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000074  00800100  000011ca  0000125e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000124  00800174  00800174  000012d2  2**0
                  ALLOC
  3 .debug_aranges 000004b8  00000000  00000000  000012d2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000cf5  00000000  00000000  0000178a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000083c6  00000000  00000000  0000247f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001fee  00000000  00000000  0000a845  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0001217c  00000000  00000000  0000c833  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000730  00000000  00000000  0001e9b0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003729  00000000  00000000  0001f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000036e5  00000000  00000000  00022809  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macinfo 0015f047  00000000  00000000  00025eee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005a8  00000000  00000000  00184f35  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	return true;
#endif
}

void Endpoint_ClearEndpoints(void)
{
       0:	a4 c0       	rjmp	.+328    	; 0x14a <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
       4:	be c0       	rjmp	.+380    	; 0x182 <__bad_interrupt>
	}
	else
	{
		return 0;
	}
}
       6:	00 00       	nop
       8:	bc c0       	rjmp	.+376    	; 0x182 <__bad_interrupt>
       a:	00 00       	nop
       c:	ba c0       	rjmp	.+372    	; 0x182 <__bad_interrupt>
       e:	00 00       	nop
      10:	b8 c0       	rjmp	.+368    	; 0x182 <__bad_interrupt>
      12:	00 00       	nop
      14:	b6 c0       	rjmp	.+364    	; 0x182 <__bad_interrupt>
      16:	00 00       	nop
      18:	b4 c0       	rjmp	.+360    	; 0x182 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	b2 c0       	rjmp	.+356    	; 0x182 <__bad_interrupt>
      1e:	00 00       	nop
      20:	b0 c0       	rjmp	.+352    	; 0x182 <__bad_interrupt>
      22:	00 00       	nop
      24:	ae c0       	rjmp	.+348    	; 0x182 <__bad_interrupt>
      26:	00 00       	nop
      28:	2c c4       	rjmp	.+2136   	; 0x882 <__vector_10>
      2a:	00 00       	nop
      2c:	ef c3       	rjmp	.+2014   	; 0x80c <__vector_11>
      2e:	00 00       	nop
      30:	a8 c0       	rjmp	.+336    	; 0x182 <__bad_interrupt>
      32:	00 00       	nop
      34:	a6 c0       	rjmp	.+332    	; 0x182 <__bad_interrupt>
      36:	00 00       	nop
      38:	a4 c0       	rjmp	.+328    	; 0x182 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	a2 c0       	rjmp	.+324    	; 0x182 <__bad_interrupt>
      3e:	00 00       	nop
      40:	a0 c0       	rjmp	.+320    	; 0x182 <__bad_interrupt>
      42:	00 00       	nop
      44:	9e c0       	rjmp	.+316    	; 0x182 <__bad_interrupt>
      46:	00 00       	nop
      48:	9c c0       	rjmp	.+312    	; 0x182 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	9a c0       	rjmp	.+308    	; 0x182 <__bad_interrupt>
      4e:	00 00       	nop
      50:	98 c0       	rjmp	.+304    	; 0x182 <__bad_interrupt>
      52:	00 00       	nop
      54:	96 c0       	rjmp	.+300    	; 0x182 <__bad_interrupt>
      56:	00 00       	nop
      58:	94 c0       	rjmp	.+296    	; 0x182 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	92 c0       	rjmp	.+292    	; 0x182 <__bad_interrupt>
      5e:	00 00       	nop
      60:	90 c0       	rjmp	.+288    	; 0x182 <__bad_interrupt>
      62:	00 00       	nop
      64:	ef c0       	rjmp	.+478    	; 0x244 <__vector_25>
      66:	00 00       	nop
      68:	8c c0       	rjmp	.+280    	; 0x182 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	8a c0       	rjmp	.+276    	; 0x182 <__bad_interrupt>
      6e:	00 00       	nop
      70:	88 c0       	rjmp	.+272    	; 0x182 <__bad_interrupt>
      72:	00 00       	nop
      74:	86 c0       	rjmp	.+268    	; 0x182 <__bad_interrupt>
      76:	00 00       	nop
      78:	84 c0       	rjmp	.+264    	; 0x182 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	82 c0       	rjmp	.+260    	; 0x182 <__bad_interrupt>
      7e:	00 00       	nop
      80:	80 c0       	rjmp	.+256    	; 0x182 <__bad_interrupt>
      82:	00 00       	nop
      84:	7e c0       	rjmp	.+252    	; 0x182 <__bad_interrupt>
      86:	00 00       	nop
      88:	7c c0       	rjmp	.+248    	; 0x182 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	7a c0       	rjmp	.+244    	; 0x182 <__bad_interrupt>
      8e:	00 00       	nop
      90:	78 c0       	rjmp	.+240    	; 0x182 <__bad_interrupt>
      92:	00 00       	nop
      94:	76 c0       	rjmp	.+236    	; 0x182 <__bad_interrupt>
      96:	00 00       	nop
      98:	74 c0       	rjmp	.+232    	; 0x182 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	72 c0       	rjmp	.+228    	; 0x182 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	70 c0       	rjmp	.+224    	; 0x182 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	6e c0       	rjmp	.+220    	; 0x182 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	6c c0       	rjmp	.+216    	; 0x182 <__bad_interrupt>
      aa:	00 00       	nop

000000ac <DeviceDescriptor>:
      ac:	12 01 10 01 02 00 00 08 eb 03 4b 20 00 00 01 02     ..........K ....
      bc:	dc 01                                               ..

000000be <ConfigurationDescriptor>:
      be:	09 02 3e 00 02 01 00 c0 fa 09 04 00 00 01 02 02     ..>.............
      ce:	01 00 05 24 00 10 01 04 24 02 06 05 24 06 00 01     ...$....$...$...
      de:	07 05 82 03 08 00 ff 09 04 01 00 02 0a 00 00 00     ................
      ee:	07 05 04 02 10 00 05 07 05 83 02 10 00 05           ..............

000000fc <LanguageString>:
      fc:	04 03 09 04                                         ....

00000100 <ManufacturerString>:
     100:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     110:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0000011a <ProductString>:
     11a:	30 03 4c 00 55 00 46 00 41 00 20 00 55 00 53 00     0.L.U.F.A. .U.S.
     12a:	42 00 2d 00 52 00 53 00 32 00 33 00 32 00 20 00     B.-.R.S.2.3.2. .
     13a:	41 00 64 00 61 00 70 00 74 00 65 00 72 00 00 00     A.d.a.p.t.e.r...

0000014a <__ctors_end>:
     14a:	11 24       	eor	r1, r1
     14c:	1f be       	out	0x3f, r1	; 63
     14e:	cf ef       	ldi	r28, 0xFF	; 255
     150:	da e0       	ldi	r29, 0x0A	; 10
     152:	de bf       	out	0x3e, r29	; 62
     154:	cd bf       	out	0x3d, r28	; 61

00000156 <__do_copy_data>:
     156:	11 e0       	ldi	r17, 0x01	; 1
     158:	a0 e0       	ldi	r26, 0x00	; 0
     15a:	b1 e0       	ldi	r27, 0x01	; 1
     15c:	ea ec       	ldi	r30, 0xCA	; 202
     15e:	f1 e1       	ldi	r31, 0x11	; 17
     160:	02 c0       	rjmp	.+4      	; 0x166 <.do_copy_data_start>

00000162 <.do_copy_data_loop>:
     162:	05 90       	lpm	r0, Z+
     164:	0d 92       	st	X+, r0

00000166 <.do_copy_data_start>:
     166:	a4 37       	cpi	r26, 0x74	; 116
     168:	b1 07       	cpc	r27, r17
     16a:	d9 f7       	brne	.-10     	; 0x162 <.do_copy_data_loop>

0000016c <__do_clear_bss>:
     16c:	12 e0       	ldi	r17, 0x02	; 2
     16e:	a4 e7       	ldi	r26, 0x74	; 116
     170:	b1 e0       	ldi	r27, 0x01	; 1
     172:	01 c0       	rjmp	.+2      	; 0x176 <.do_clear_bss_start>

00000174 <.do_clear_bss_loop>:
     174:	1d 92       	st	X+, r1

00000176 <.do_clear_bss_start>:
     176:	a8 39       	cpi	r26, 0x98	; 152
     178:	b1 07       	cpc	r27, r17
     17a:	e1 f7       	brne	.-8      	; 0x174 <.do_clear_bss_loop>
     17c:	70 d1       	rcall	.+736    	; 0x45e <main>
     17e:	0c 94 e3 08 	jmp	0x11c6	; 0x11c6 <_exit>

00000182 <__bad_interrupt>:
     182:	3e cf       	rjmp	.-388    	; 0x0 <__vectors>

00000184 <LEDs_SetAllLEDs>:
//#define LEDMASK_USB_NOTREADY 
//#define LEDMASK_USB_ENUMERATING

void LEDs_SetAllLEDs(int LEDVal)
{
	if (LEDVal & 0x1)
     184:	80 ff       	sbrs	r24, 0
     186:	02 c0       	rjmp	.+4      	; 0x18c <LEDs_SetAllLEDs+0x8>
		PORTB |= 0x2;
     188:	29 9a       	sbi	0x05, 1	; 5
     18a:	01 c0       	rjmp	.+2      	; 0x18e <LEDs_SetAllLEDs+0xa>
	else
		PORTB &= 0xfd;
     18c:	29 98       	cbi	0x05, 1	; 5
	if (LEDVal & 0x2)
     18e:	81 ff       	sbrs	r24, 1
     190:	02 c0       	rjmp	.+4      	; 0x196 <LEDs_SetAllLEDs+0x12>
		PORTB |= 0x4;
     192:	2a 9a       	sbi	0x05, 2	; 5
     194:	08 95       	ret
	else
		PORTB &= 0xfb;
     196:	2a 98       	cbi	0x05, 2	; 5
     198:	08 95       	ret

0000019a <LEDs_Init>:
}

void LEDs_Init(void)
{
	DDRB = 0x06;
     19a:	86 e0       	ldi	r24, 0x06	; 6
     19c:	84 b9       	out	0x04, r24	; 4
	PORTB &= 0xfa;
     19e:	85 b1       	in	r24, 0x05	; 5
     1a0:	8a 7f       	andi	r24, 0xFA	; 250
     1a2:	85 b9       	out	0x05, r24	; 5
}
     1a4:	08 95       	ret

000001a6 <RingBuffer_Insert>:
		 *  \param[in,out] Buffer  Pointer to a ring buffer structure to insert into.
		 *  \param[in]     Data    Data element to insert into the buffer.
		 */
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data) ATTR_NON_NULL_PTR_ARG(1);
		static inline void RingBuffer_Insert(RingBuffer_t* Buffer, const uint8_t Data)
		{
     1a6:	cf 93       	push	r28
     1a8:	df 93       	push	r29
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1aa:	ec 01       	movw	r28, r24

			*Buffer->In = Data;
     1ac:	e8 81       	ld	r30, Y
     1ae:	f9 81       	ldd	r31, Y+1	; 0x01
     1b0:	60 83       	st	Z, r22

			if (++Buffer->In == Buffer->End)
     1b2:	88 81       	ld	r24, Y
     1b4:	99 81       	ldd	r25, Y+1	; 0x01
     1b6:	01 96       	adiw	r24, 0x01	; 1
     1b8:	99 83       	std	Y+1, r25	; 0x01
     1ba:	88 83       	st	Y, r24
     1bc:	2e 81       	ldd	r18, Y+6	; 0x06
     1be:	3f 81       	ldd	r19, Y+7	; 0x07
     1c0:	82 17       	cp	r24, r18
     1c2:	93 07       	cpc	r25, r19
     1c4:	21 f4       	brne	.+8      	; 0x1ce <RingBuffer_Insert+0x28>
			  Buffer->In = Buffer->Start;
     1c6:	8c 81       	ldd	r24, Y+4	; 0x04
     1c8:	9d 81       	ldd	r25, Y+5	; 0x05
     1ca:	99 83       	std	Y+1, r25	; 0x01
     1cc:	88 83       	st	Y, r24
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     1ce:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     1d0:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count++;
     1d2:	8a 85       	ldd	r24, Y+10	; 0x0a
     1d4:	9b 85       	ldd	r25, Y+11	; 0x0b
     1d6:	01 96       	adiw	r24, 0x01	; 1
     1d8:	9b 87       	std	Y+11, r25	; 0x0b
     1da:	8a 87       	std	Y+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     1dc:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);
		}
     1de:	df 91       	pop	r29
     1e0:	cf 91       	pop	r28
     1e2:	08 95       	ret

000001e4 <RingBuffer_Remove>:
		 *
		 *  \return Next data element stored in the buffer.
		 */
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer) ATTR_NON_NULL_PTR_ARG(1);
		static inline uint8_t RingBuffer_Remove(RingBuffer_t* Buffer)
		{
     1e4:	cf 93       	push	r28
     1e6:	df 93       	push	r29
			GCC_FORCE_POINTER_ACCESS(Buffer);
     1e8:	ec 01       	movw	r28, r24

			uint8_t Data = *Buffer->Out;
     1ea:	ea 81       	ldd	r30, Y+2	; 0x02
     1ec:	fb 81       	ldd	r31, Y+3	; 0x03
     1ee:	31 91       	ld	r19, Z+

			if (++Buffer->Out == Buffer->End)
     1f0:	fb 83       	std	Y+3, r31	; 0x03
     1f2:	ea 83       	std	Y+2, r30	; 0x02
     1f4:	8e 81       	ldd	r24, Y+6	; 0x06
     1f6:	9f 81       	ldd	r25, Y+7	; 0x07
     1f8:	e8 17       	cp	r30, r24
     1fa:	f9 07       	cpc	r31, r25
     1fc:	21 f4       	brne	.+8      	; 0x206 <RingBuffer_Remove+0x22>
			  Buffer->Out = Buffer->Start;
     1fe:	8c 81       	ldd	r24, Y+4	; 0x04
     200:	9d 81       	ldd	r25, Y+5	; 0x05
     202:	9b 83       	std	Y+3, r25	; 0x03
     204:	8a 83       	std	Y+2, r24	; 0x02
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     206:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     208:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->Count--;
     20a:	8a 85       	ldd	r24, Y+10	; 0x0a
     20c:	9b 85       	ldd	r25, Y+11	; 0x0b
     20e:	01 97       	sbiw	r24, 0x01	; 1
     210:	9b 87       	std	Y+11, r25	; 0x0b
     212:	8a 87       	std	Y+10, r24	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     214:	2f bf       	out	0x3f, r18	; 63

			SetGlobalInterruptMask(CurrentGlobalInt);

			return Data;
		}
     216:	83 2f       	mov	r24, r19
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <outStringToGPS>:
		USB_USBTask();
	}
}

void outStringToGPS(char * stringPtr)
{
     21e:	fc 01       	movw	r30, r24
     220:	07 c0       	rjmp	.+14     	; 0x230 <outStringToGPS+0x12>
	int16_t outBuffPtr = 0;
	while (stringPtr[outBuffPtr] != 0)
	{
		while (!( UCSR1A & (1<<UDRE1)) );		// hang around until transmitter is empty
     222:	80 91 c8 00 	lds	r24, 0x00C8
     226:	85 ff       	sbrs	r24, 5
     228:	fc cf       	rjmp	.-8      	; 0x222 <outStringToGPS+0x4>
		UDR1 = stringPtr[outBuffPtr];
     22a:	90 93 ce 00 	sts	0x00CE, r25
     22e:	31 96       	adiw	r30, 0x01	; 1
}

void outStringToGPS(char * stringPtr)
{
	int16_t outBuffPtr = 0;
	while (stringPtr[outBuffPtr] != 0)
     230:	90 81       	ld	r25, Z
     232:	99 23       	and	r25, r25
     234:	b1 f7       	brne	.-20     	; 0x222 <outStringToGPS+0x4>
	{
		while (!( UCSR1A & (1<<UDRE1)) );		// hang around until transmitter is empty
		UDR1 = stringPtr[outBuffPtr];
		outBuffPtr++;
	}
	while ((UCSR1A & TXC1) == 0);		// hang around until the entire packet is transmitted out
     236:	80 91 c8 00 	lds	r24, 0x00C8
     23a:	86 70       	andi	r24, 0x06	; 6
     23c:	e1 f3       	breq	.-8      	; 0x236 <outStringToGPS+0x18>
	return;
}
     23e:	08 95       	ret

00000240 <EVENT_USB_Device_Connect>:

/** Event handler for the library USB Connection event. */
void EVENT_USB_Device_Connect(void)
{
//	LEDs_SetAllLEDs(1);
}
     240:	08 95       	ret

00000242 <EVENT_USB_Device_Disconnect>:

/** Event handler for the library USB Disconnection event. */
void EVENT_USB_Device_Disconnect(void)
{
//	LEDs_SetAllLEDs(2);
}
     242:	08 95       	ret

00000244 <__vector_25>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
     244:	1f 92       	push	r1
     246:	0f 92       	push	r0
     248:	0f b6       	in	r0, 0x3f	; 63
     24a:	0f 92       	push	r0
     24c:	11 24       	eor	r1, r1
     24e:	2f 93       	push	r18
     250:	3f 93       	push	r19
     252:	4f 93       	push	r20
     254:	5f 93       	push	r21
     256:	6f 93       	push	r22
     258:	7f 93       	push	r23
     25a:	8f 93       	push	r24
     25c:	9f 93       	push	r25
     25e:	af 93       	push	r26
     260:	bf 93       	push	r27
     262:	ef 93       	push	r30
     264:	ff 93       	push	r31
	uint8_t ReceivedByte = UDR1;
     266:	60 91 ce 00 	lds	r22, 0x00CE

	if (USB_DeviceState == DEVICE_STATE_Configured)
     26a:	8e b3       	in	r24, 0x1e	; 30
     26c:	84 30       	cpi	r24, 0x04	; 4
     26e:	19 f4       	brne	.+6      	; 0x276 <__vector_25+0x32>
	  RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	92 e0       	ldi	r25, 0x02	; 2
     274:	98 df       	rcall	.-208    	; 0x1a6 <RingBuffer_Insert>
}
     276:	ff 91       	pop	r31
     278:	ef 91       	pop	r30
     27a:	bf 91       	pop	r27
     27c:	af 91       	pop	r26
     27e:	9f 91       	pop	r25
     280:	8f 91       	pop	r24
     282:	7f 91       	pop	r23
     284:	6f 91       	pop	r22
     286:	5f 91       	pop	r21
     288:	4f 91       	pop	r20
     28a:	3f 91       	pop	r19
     28c:	2f 91       	pop	r18
     28e:	0f 90       	pop	r0
     290:	0f be       	out	0x3f, r0	; 63
     292:	0f 90       	pop	r0
     294:	1f 90       	pop	r1
     296:	18 95       	reti

00000298 <EVENT_CDC_Device_LineEncodingChanged>:
/** Event handler for the CDC Class driver Line Encoding Changed event.
 *
 *  \param[in] CDCInterfaceInfo  Pointer to the CDC class interface configuration structure being referenced
 */
void EVENT_CDC_Device_LineEncodingChanged(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     298:	1f 93       	push	r17
     29a:	fc 01       	movw	r30, r24
	uint8_t ConfigMask = 0;

	switch (CDCInterfaceInfo->State.LineEncoding.ParityType)
     29c:	81 8d       	ldd	r24, Z+25	; 0x19
     29e:	81 30       	cpi	r24, 0x01	; 1
     2a0:	19 f0       	breq	.+6      	; 0x2a8 <EVENT_CDC_Device_LineEncodingChanged+0x10>
     2a2:	82 30       	cpi	r24, 0x02	; 2
     2a4:	19 f4       	brne	.+6      	; 0x2ac <EVENT_CDC_Device_LineEncodingChanged+0x14>
     2a6:	04 c0       	rjmp	.+8      	; 0x2b0 <EVENT_CDC_Device_LineEncodingChanged+0x18>
     2a8:	10 e3       	ldi	r17, 0x30	; 48
     2aa:	03 c0       	rjmp	.+6      	; 0x2b2 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
     2ac:	10 e0       	ldi	r17, 0x00	; 0
     2ae:	01 c0       	rjmp	.+2      	; 0x2b2 <EVENT_CDC_Device_LineEncodingChanged+0x1a>
     2b0:	10 e2       	ldi	r17, 0x20	; 32
		case CDC_PARITY_Even:
			ConfigMask = (1 << UPM11);
			break;
	}

	if (CDCInterfaceInfo->State.LineEncoding.CharFormat == CDC_LINEENCODING_TwoStopBits)
     2b2:	80 8d       	ldd	r24, Z+24	; 0x18
     2b4:	82 30       	cpi	r24, 0x02	; 2
     2b6:	09 f4       	brne	.+2      	; 0x2ba <EVENT_CDC_Device_LineEncodingChanged+0x22>
	  ConfigMask |= (1 << USBS1);
     2b8:	18 60       	ori	r17, 0x08	; 8

	switch (CDCInterfaceInfo->State.LineEncoding.DataBits)
     2ba:	82 8d       	ldd	r24, Z+26	; 0x1a
     2bc:	87 30       	cpi	r24, 0x07	; 7
     2be:	31 f0       	breq	.+12     	; 0x2cc <EVENT_CDC_Device_LineEncodingChanged+0x34>
     2c0:	88 30       	cpi	r24, 0x08	; 8
     2c2:	31 f0       	breq	.+12     	; 0x2d0 <EVENT_CDC_Device_LineEncodingChanged+0x38>
     2c4:	86 30       	cpi	r24, 0x06	; 6
     2c6:	29 f4       	brne	.+10     	; 0x2d2 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
	{
		case 6:
			ConfigMask |= (1 << UCSZ10);
     2c8:	12 60       	ori	r17, 0x02	; 2
     2ca:	03 c0       	rjmp	.+6      	; 0x2d2 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 7:
			ConfigMask |= (1 << UCSZ11);
     2cc:	14 60       	ori	r17, 0x04	; 4
     2ce:	01 c0       	rjmp	.+2      	; 0x2d2 <EVENT_CDC_Device_LineEncodingChanged+0x3a>
			break;
		case 8:
			ConfigMask |= ((1 << UCSZ11) | (1 << UCSZ10));
     2d0:	16 60       	ori	r17, 0x06	; 6
			break;
	}

	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     2d2:	10 92 c9 00 	sts	0x00C9, r1
	UCSR1A = 0;
     2d6:	10 92 c8 00 	sts	0x00C8, r1
	UCSR1C = 0;
     2da:	10 92 ca 00 	sts	0x00CA, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = SERIAL_2X_UBBRVAL(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
     2de:	24 89       	ldd	r18, Z+20	; 0x14
     2e0:	35 89       	ldd	r19, Z+21	; 0x15
     2e2:	46 89       	ldd	r20, Z+22	; 0x16
     2e4:	57 89       	ldd	r21, Z+23	; 0x17
     2e6:	ca 01       	movw	r24, r20
     2e8:	b9 01       	movw	r22, r18
     2ea:	96 95       	lsr	r25
     2ec:	87 95       	ror	r24
     2ee:	77 95       	ror	r23
     2f0:	67 95       	ror	r22
     2f2:	60 5c       	subi	r22, 0xC0	; 192
     2f4:	7d 4b       	sbci	r23, 0xBD	; 189
     2f6:	80 4f       	sbci	r24, 0xF0	; 240
     2f8:	9f 4f       	sbci	r25, 0xFF	; 255
     2fa:	43 d7       	rcall	.+3718   	; 0x1182 <__udivmodsi4>
     2fc:	21 50       	subi	r18, 0x01	; 1
     2fe:	30 40       	sbci	r19, 0x00	; 0
     300:	30 93 cd 00 	sts	0x00CD, r19
     304:	20 93 cc 00 	sts	0x00CC, r18

	/* Reconfigure the USART in double speed mode for a wider baud rate range at the expense of accuracy */
	UCSR1C = ConfigMask;
     308:	10 93 ca 00 	sts	0x00CA, r17
	UCSR1A = (1 << U2X1);
     30c:	82 e0       	ldi	r24, 0x02	; 2
     30e:	80 93 c8 00 	sts	0x00C8, r24
	UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
     312:	88 e9       	ldi	r24, 0x98	; 152
     314:	80 93 c9 00 	sts	0x00C9, r24
}
     318:	1f 91       	pop	r17
     31a:	08 95       	ret

0000031c <setBaudRate9600>:

void setBaudRate9600(void)
{
	/* Must turn off USART before reconfiguring it, otherwise incorrect operation may occur */
	UCSR1B = 0;
     31c:	29 ec       	ldi	r18, 0xC9	; 201
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	f9 01       	movw	r30, r18
     322:	10 82       	st	Z, r1
	UCSR1A = 0;
     324:	a8 ec       	ldi	r26, 0xC8	; 200
     326:	b0 e0       	ldi	r27, 0x00	; 0
     328:	1c 92       	st	X, r1
	UCSR1C = 0;
     32a:	ea ec       	ldi	r30, 0xCA	; 202
     32c:	f0 e0       	ldi	r31, 0x00	; 0
     32e:	10 82       	st	Z, r1

	/* Set the new baud rate before configuring the USART */
	UBRR1  = 103;
     330:	87 e6       	ldi	r24, 0x67	; 103
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	90 93 cd 00 	sts	0x00CD, r25
     338:	80 93 cc 00 	sts	0x00CC, r24
	// UCSR1C[7:6] = 00 - Async USART
	// UCSR1C[5:4] = 00 - No Parity
	// UCSR1C[3]   = 0  - 1 Stop Bit
	// UCSR1C[2:1] = 11 - 8 Data Bits
	// UCSR1C[0]   = 0  - Clock Polarity (8 for Async)
	UCSR1C = 0x6;
     33c:	86 e0       	ldi	r24, 0x06	; 6
     33e:	80 83       	st	Z, r24
	UCSR1A = (1 << U2X1);
     340:	82 e0       	ldi	r24, 0x02	; 2
     342:	8c 93       	st	X, r24
	UCSR1B = 0x08;
     344:	88 e0       	ldi	r24, 0x08	; 8
     346:	f9 01       	movw	r30, r18
     348:	80 83       	st	Z, r24
}
     34a:	08 95       	ret

0000034c <EVENT_USB_Device_ControlRequest>:
}

/** Event handler for the library USB Control Request reception event. */
void EVENT_USB_Device_ControlRequest(void)
{
	CDC_Device_ProcessControlRequest(&VirtualSerial_CDC_Interface);
     34c:	88 e5       	ldi	r24, 0x58	; 88
     34e:	91 e0       	ldi	r25, 0x01	; 1
}
     350:	6c c6       	rjmp	.+3288   	; 0x102a <CDC_Device_ProcessControlRequest>

00000352 <EVENT_USB_Device_ConfigurationChanged>:
/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
	bool ConfigSuccess = true;

	ConfigSuccess &= CDC_Device_ConfigureEndpoints(&VirtualSerial_CDC_Interface);
     352:	88 e5       	ldi	r24, 0x58	; 88
     354:	91 e0       	ldi	r25, 0x01	; 1

//	LEDs_SetAllLEDs(ConfigSuccess ? 2 : 3);
}
     356:	42 c6       	rjmp	.+3204   	; 0xfdc <CDC_Device_ConfigureEndpoints>

00000358 <SetupHardware>:
	return;
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
     358:	df 93       	push	r29
     35a:	cf 93       	push	r28
     35c:	cd b7       	in	r28, 0x3d	; 61
     35e:	de b7       	in	r29, 0x3e	; 62
     360:	c8 55       	subi	r28, 0x58	; 88
     362:	d0 40       	sbci	r29, 0x00	; 0
     364:	0f b6       	in	r0, 0x3f	; 63
     366:	f8 94       	cli
     368:	de bf       	out	0x3e, r29	; 62
     36a:	0f be       	out	0x3f, r0	; 63
     36c:	cd bf       	out	0x3d, r28	; 61
	char stopMostSentencesString[] = "$PMTK314,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0*29\r\n";
     36e:	de 01       	movw	r26, r28
     370:	95 96       	adiw	r26, 0x25	; 37
     372:	e0 e0       	ldi	r30, 0x00	; 0
     374:	f1 e0       	ldi	r31, 0x01	; 1
     376:	84 e3       	ldi	r24, 0x34	; 52
     378:	01 90       	ld	r0, Z+
     37a:	0d 92       	st	X+, r0
     37c:	81 50       	subi	r24, 0x01	; 1
     37e:	e1 f7       	brne	.-8      	; 0x378 <SetupHardware+0x20>
	char kickLoggerString[] = "$PMTK185,0*22\r\n";
     380:	de 01       	movw	r26, r28
     382:	11 96       	adiw	r26, 0x01	; 1
     384:	e4 e3       	ldi	r30, 0x34	; 52
     386:	f1 e0       	ldi	r31, 0x01	; 1
     388:	80 e1       	ldi	r24, 0x10	; 16
     38a:	01 90       	ld	r0, Z+
     38c:	0d 92       	st	X+, r0
     38e:	81 50       	subi	r24, 0x01	; 1
     390:	e1 f7       	brne	.-8      	; 0x38a <SetupHardware+0x32>
	char nmea10sec[] = "$PMTK220,10000*2F\r\n";
     392:	de 01       	movw	r26, r28
     394:	51 96       	adiw	r26, 0x11	; 17
     396:	e4 e4       	ldi	r30, 0x44	; 68
     398:	f1 e0       	ldi	r31, 0x01	; 1
     39a:	84 e1       	ldi	r24, 0x14	; 20
     39c:	01 90       	ld	r0, Z+
     39e:	0d 92       	st	X+, r0
     3a0:	81 50       	subi	r24, 0x01	; 1
     3a2:	e1 f7       	brne	.-8      	; 0x39c <SetupHardware+0x44>
	
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     3a4:	84 b7       	in	r24, 0x34	; 52
     3a6:	87 7f       	andi	r24, 0xF7	; 247
     3a8:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     3aa:	88 e1       	ldi	r24, 0x18	; 24
     3ac:	0f b6       	in	r0, 0x3f	; 63
     3ae:	f8 94       	cli
     3b0:	80 93 60 00 	sts	0x0060, r24
     3b4:	10 92 60 00 	sts	0x0060, r1
     3b8:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
     3ba:	80 e0       	ldi	r24, 0x00	; 0
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	20 e8       	ldi	r18, 0x80	; 128
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	f8 94       	cli
     3c4:	20 93 61 00 	sts	0x0061, r18
     3c8:	80 93 61 00 	sts	0x0061, r24
     3cc:	0f be       	out	0x3f, r0	; 63

	/* Hardware Initialization */
	LEDs_Init();
     3ce:	e5 de       	rcall	.-566    	; 0x19a <LEDs_Init>

	LEDs_SetAllLEDs(1);
     3d0:	81 e0       	ldi	r24, 0x01	; 1
     3d2:	90 e0       	ldi	r25, 0x00	; 0
     3d4:	d7 de       	rcall	.-594    	; 0x184 <LEDs_SetAllLEDs>
     3d6:	88 ee       	ldi	r24, 0xE8	; 232
     3d8:	93 e0       	ldi	r25, 0x03	; 3
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     3da:	28 ec       	ldi	r18, 0xC8	; 200
     3dc:	30 e0       	ldi	r19, 0x00	; 0
     3de:	f9 01       	movw	r30, r18
     3e0:	31 97       	sbiw	r30, 0x01	; 1
     3e2:	f1 f7       	brne	.-4      	; 0x3e0 <SetupHardware+0x88>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3e4:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3e6:	d9 f7       	brne	.-10     	; 0x3de <SetupHardware+0x86>

	_delay_ms(100);

	// Hard set the baud rate to 9600 since that's the rate that the USART runs at
	setBaudRate9600();
     3e8:	99 df       	rcall	.-206    	; 0x31c <setBaudRate9600>
     3ea:	88 ee       	ldi	r24, 0xE8	; 232
     3ec:	93 e0       	ldi	r25, 0x03	; 3
     3ee:	28 ec       	ldi	r18, 0xC8	; 200
     3f0:	30 e0       	ldi	r19, 0x00	; 0
     3f2:	f9 01       	movw	r30, r18
     3f4:	31 97       	sbiw	r30, 0x01	; 1
     3f6:	f1 f7       	brne	.-4      	; 0x3f4 <SetupHardware+0x9c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3f8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3fa:	d9 f7       	brne	.-10     	; 0x3f2 <SetupHardware+0x9a>

	// Set NMEA sentence output frequencies
	// PMTK_API_SET_NMEA_OUTPUT
	// $PMTK314,... is the command
	
	outStringToGPS(stopMostSentencesString);
     3fc:	ce 01       	movw	r24, r28
     3fe:	85 96       	adiw	r24, 0x25	; 37
     400:	0e df       	rcall	.-484    	; 0x21e <outStringToGPS>
     402:	88 ee       	ldi	r24, 0xE8	; 232
     404:	93 e0       	ldi	r25, 0x03	; 3
     406:	28 ec       	ldi	r18, 0xC8	; 200
     408:	30 e0       	ldi	r19, 0x00	; 0
     40a:	f9 01       	movw	r30, r18
     40c:	31 97       	sbiw	r30, 0x01	; 1
     40e:	f1 f7       	brne	.-4      	; 0x40c <SetupHardware+0xb4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     410:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     412:	d9 f7       	brne	.-10     	; 0x40a <SetupHardware+0xb2>
	_delay_ms(100);

	// Set the NMEA port update rate to 10 seconds

	outStringToGPS(nmea10sec);
     414:	ce 01       	movw	r24, r28
     416:	41 96       	adiw	r24, 0x11	; 17
     418:	02 df       	rcall	.-508    	; 0x21e <outStringToGPS>
     41a:	88 ee       	ldi	r24, 0xE8	; 232
     41c:	93 e0       	ldi	r25, 0x03	; 3
     41e:	28 ec       	ldi	r18, 0xC8	; 200
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	f9 01       	movw	r30, r18
     424:	31 97       	sbiw	r30, 0x01	; 1
     426:	f1 f7       	brne	.-4      	; 0x424 <SetupHardware+0xcc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     428:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     42a:	d9 f7       	brne	.-10     	; 0x422 <SetupHardware+0xca>

	// Kick the GPS LOCUS to start logging data
	// PMTK_LOCUS_STARTLOG
	// $PMTK185,0*22 is the command
	
	outStringToGPS(kickLoggerString);
     42c:	ce 01       	movw	r24, r28
     42e:	01 96       	adiw	r24, 0x01	; 1
     430:	f6 de       	rcall	.-532    	; 0x21e <outStringToGPS>
     432:	88 ee       	ldi	r24, 0xE8	; 232
     434:	93 e0       	ldi	r25, 0x03	; 3
     436:	28 ec       	ldi	r18, 0xC8	; 200
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	f9 01       	movw	r30, r18
     43c:	31 97       	sbiw	r30, 0x01	; 1
     43e:	f1 f7       	brne	.-4      	; 0x43c <SetupHardware+0xe4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     440:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     442:	d9 f7       	brne	.-10     	; 0x43a <SetupHardware+0xe2>
	_delay_ms(100);

	USB_Init();
     444:	cb d1       	rcall	.+918    	; 0x7dc <USB_Init>

	/* Start the flush timer so that overflows occur rapidly to push received bytes to the USB interface */
	TCCR0B = (1 << CS02);
     446:	84 e0       	ldi	r24, 0x04	; 4
     448:	85 bd       	out	0x25, r24	; 37
}
     44a:	c8 5a       	subi	r28, 0xA8	; 168
     44c:	df 4f       	sbci	r29, 0xFF	; 255
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	f8 94       	cli
     452:	de bf       	out	0x3e, r29	; 62
     454:	0f be       	out	0x3f, r0	; 63
     456:	cd bf       	out	0x3d, r28	; 61
     458:	cf 91       	pop	r28
     45a:	df 91       	pop	r29
     45c:	08 95       	ret

0000045e <main>:
 *   Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */

int main(void)
{
     45e:	cf 93       	push	r28
     460:	df 93       	push	r29
	SetupHardware();
     462:	7a df       	rcall	.-268    	; 0x358 <SetupHardware>
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     464:	e4 e7       	ldi	r30, 0x74	; 116
     466:	f1 e0       	ldi	r31, 0x01	; 1
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     468:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     46a:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     46c:	80 e8       	ldi	r24, 0x80	; 128
     46e:	91 e0       	ldi	r25, 0x01	; 1
     470:	91 83       	std	Z+1, r25	; 0x01
     472:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     474:	93 83       	std	Z+3, r25	; 0x03
     476:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     478:	95 83       	std	Z+5, r25	; 0x05
     47a:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	92 e0       	ldi	r25, 0x02	; 2
     480:	97 83       	std	Z+7, r25	; 0x07
     482:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     484:	80 e8       	ldi	r24, 0x80	; 128
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	91 87       	std	Z+9, r25	; 0x09
     48a:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     48c:	13 86       	std	Z+11, r1	; 0x0b
     48e:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     490:	2f bf       	out	0x3f, r18	; 63
		 */
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		                                         ATTR_NON_NULL_PTR_ARG(1) ATTR_NON_NULL_PTR_ARG(2);
		static inline void RingBuffer_InitBuffer(RingBuffer_t* Buffer, uint8_t* const DataPtr, const uint16_t Size)
		{
			GCC_FORCE_POINTER_ACCESS(Buffer);
     492:	e0 e0       	ldi	r30, 0x00	; 0
     494:	f2 e0       	ldi	r31, 0x02	; 2
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     496:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     498:	f8 94       	cli

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Buffer->In     = DataPtr;
     49a:	8c e0       	ldi	r24, 0x0C	; 12
     49c:	92 e0       	ldi	r25, 0x02	; 2
     49e:	91 83       	std	Z+1, r25	; 0x01
     4a0:	80 83       	st	Z, r24
			Buffer->Out    = DataPtr;
     4a2:	93 83       	std	Z+3, r25	; 0x03
     4a4:	82 83       	std	Z+2, r24	; 0x02
			Buffer->Start  = &DataPtr[0];
     4a6:	95 83       	std	Z+5, r25	; 0x05
     4a8:	84 83       	std	Z+4, r24	; 0x04
			Buffer->End    = &DataPtr[Size];
     4aa:	8c e8       	ldi	r24, 0x8C	; 140
     4ac:	92 e0       	ldi	r25, 0x02	; 2
     4ae:	97 83       	std	Z+7, r25	; 0x07
     4b0:	86 83       	std	Z+6, r24	; 0x06
			Buffer->Size   = Size;
     4b2:	80 e8       	ldi	r24, 0x80	; 128
     4b4:	90 e0       	ldi	r25, 0x00	; 0
     4b6:	91 87       	std	Z+9, r25	; 0x09
     4b8:	80 87       	std	Z+8, r24	; 0x08
			Buffer->Count  = 0;
     4ba:	13 86       	std	Z+11, r1	; 0x0b
     4bc:	12 86       	std	Z+10, r1	; 0x0a
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     4be:	2f bf       	out	0x3f, r18	; 63

	RingBuffer_InitBuffer(&USBtoUSART_Buffer, USBtoUSART_Buffer_Data, sizeof(USBtoUSART_Buffer_Data));
	RingBuffer_InitBuffer(&USARTtoUSB_Buffer, USARTtoUSB_Buffer_Data, sizeof(USARTtoUSB_Buffer_Data));

	LEDs_SetAllLEDs(0);
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	90 e0       	ldi	r25, 0x00	; 0
     4c4:	5f de       	rcall	.-834    	; 0x184 <LEDs_SetAllLEDs>

	sei();
     4c6:	78 94       	sei

	for (;;)
	{
		if ((PINB & 0x40) == 0x40)
     4c8:	1e 9b       	sbis	0x03, 6	; 3
     4ca:	03 c0       	rjmp	.+6      	; 0x4d2 <main+0x74>
			LEDs_SetAllLEDs(2);
     4cc:	82 e0       	ldi	r24, 0x02	; 2
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <main+0x78>
		else
			LEDs_SetAllLEDs(0);
     4d2:	80 e0       	ldi	r24, 0x00	; 0
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	56 de       	rcall	.-852    	; 0x184 <LEDs_SetAllLEDs>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     4d8:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     4da:	f8 94       	cli
			uint16_t Count;

			uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
			GlobalInterruptDisable();

			Count = Buffer->Count;
     4dc:	20 91 7e 01 	lds	r18, 0x017E
     4e0:	30 91 7f 01 	lds	r19, 0x017F
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     4e4:	8f bf       	out	0x3f, r24	; 63
		/* Only try to read in bytes from the CDC interface if the (outbound) transmit buffer is not full */
		if (!(RingBuffer_IsFull(&USBtoUSART_Buffer)))
     4e6:	80 91 7c 01 	lds	r24, 0x017C
     4ea:	90 91 7d 01 	lds	r25, 0x017D
     4ee:	28 17       	cp	r18, r24
     4f0:	39 07       	cpc	r19, r25
     4f2:	49 f0       	breq	.+18     	; 0x506 <main+0xa8>
		{
			int16_t ReceivedByte = CDC_Device_ReceiveByte(&VirtualSerial_CDC_Interface);
     4f4:	88 e5       	ldi	r24, 0x58	; 88
     4f6:	91 e0       	ldi	r25, 0x01	; 1
     4f8:	ce d4       	rcall	.+2460   	; 0xe96 <CDC_Device_ReceiveByte>
     4fa:	bc 01       	movw	r22, r24

			/* Read bytes from the USB OUT endpoint into the USART transmit buffer */
			if (!(ReceivedByte < 0))
     4fc:	97 fd       	sbrc	r25, 7
     4fe:	03 c0       	rjmp	.+6      	; 0x506 <main+0xa8>
			  RingBuffer_Insert(&USBtoUSART_Buffer, ReceivedByte);
     500:	84 e7       	ldi	r24, 0x74	; 116
     502:	91 e0       	ldi	r25, 0x01	; 1
     504:	50 de       	rcall	.-864    	; 0x1a6 <RingBuffer_Insert>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     506:	8f b7       	in	r24, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     508:	f8 94       	cli
     50a:	c0 91 0a 02 	lds	r28, 0x020A
     50e:	d0 91 0b 02 	lds	r29, 0x020B
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     512:	8f bf       	out	0x3f, r24	; 63
		}

		/* Check if the UART receive buffer flush timer has expired or the buffer is nearly full */
		uint16_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);
		if ((TIFR0 & (1 << TOV0)) || (BufferCount > (uint8_t)(sizeof(USARTtoUSB_Buffer_Data) * .75)))
     514:	a8 99       	sbic	0x15, 0	; 21
     516:	03 c0       	rjmp	.+6      	; 0x51e <main+0xc0>
     518:	c1 36       	cpi	r28, 0x61	; 97
     51a:	d1 05       	cpc	r29, r1
     51c:	90 f0       	brcs	.+36     	; 0x542 <main+0xe4>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);
     51e:	a8 9a       	sbi	0x15, 0	; 21
     520:	0e c0       	rjmp	.+28     	; 0x53e <main+0xe0>

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
			{
				/* Try to send the next byte of data to the host, abort if there is an error without dequeuing */
				if (CDC_Device_SendByte(&VirtualSerial_CDC_Interface,
     522:	e0 91 02 02 	lds	r30, 0x0202
     526:	f0 91 03 02 	lds	r31, 0x0203
     52a:	88 e5       	ldi	r24, 0x58	; 88
     52c:	91 e0       	ldi	r25, 0x01	; 1
     52e:	60 81       	ld	r22, Z
     530:	30 d5       	rcall	.+2656   	; 0xf92 <CDC_Device_SendByte>
     532:	21 97       	sbiw	r28, 0x01	; 1
     534:	88 23       	and	r24, r24
     536:	29 f4       	brne	.+10     	; 0x542 <main+0xe4>
				{
					break;
				}

				/* Dequeue the already sent byte from the buffer now we have confirmed that no transmission error occurred */
				RingBuffer_Remove(&USARTtoUSB_Buffer);
     538:	80 e0       	ldi	r24, 0x00	; 0
     53a:	92 e0       	ldi	r25, 0x02	; 2
     53c:	53 de       	rcall	.-858    	; 0x1e4 <RingBuffer_Remove>
		{
			/* Clear flush timer expiry flag */
			TIFR0 |= (1 << TOV0);

			/* Read bytes from the USART receive buffer into the USB IN endpoint */
			while (BufferCount--)
     53e:	20 97       	sbiw	r28, 0x00	; 0
     540:	81 f7       	brne	.-32     	; 0x522 <main+0xc4>
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     542:	2f b7       	in	r18, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     544:	f8 94       	cli
     546:	80 91 7e 01 	lds	r24, 0x017E
     54a:	90 91 7f 01 	lds	r25, 0x017F
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     54e:	2f bf       	out	0x3f, r18	; 63
				RingBuffer_Remove(&USARTtoUSB_Buffer);
			}
		}

		/* Load the next byte from the USART transmit buffer into the USART */
		if (!(RingBuffer_IsEmpty(&USBtoUSART_Buffer)))
     550:	89 2b       	or	r24, r25
     552:	51 f0       	breq	.+20     	; 0x568 <main+0x10a>
		  Serial_SendByte(RingBuffer_Remove(&USBtoUSART_Buffer));
     554:	84 e7       	ldi	r24, 0x74	; 116
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	45 de       	rcall	.-886    	; 0x1e4 <RingBuffer_Remove>
     55a:	98 2f       	mov	r25, r24
			 *  \param[in] DataByte  Byte to transmit through the USART.
			 */
			static inline void Serial_SendByte(const char DataByte) ATTR_ALWAYS_INLINE;
			static inline void Serial_SendByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
     55c:	80 91 c8 00 	lds	r24, 0x00C8
     560:	85 ff       	sbrs	r24, 5
     562:	fc cf       	rjmp	.-8      	; 0x55c <main+0xfe>
				UDR1 = DataByte;
     564:	90 93 ce 00 	sts	0x00CE, r25

		CDC_Device_USBTask(&VirtualSerial_CDC_Interface);
     568:	88 e5       	ldi	r24, 0x58	; 88
     56a:	91 e0       	ldi	r25, 0x01	; 1
     56c:	03 d5       	rcall	.+2566   	; 0xf74 <CDC_Device_USBTask>
		USB_USBTask();
     56e:	7f d4       	rcall	.+2302   	; 0xe6e <USB_USBTask>
     570:	ab cf       	rjmp	.-170    	; 0x4c8 <main+0x6a>

00000572 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
     572:	da 01       	movw	r26, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     574:	92 30       	cpi	r25, 0x02	; 2
     576:	49 f0       	breq	.+18     	; 0x58a <CALLBACK_USB_GetDescriptor+0x18>
     578:	93 30       	cpi	r25, 0x03	; 3
     57a:	61 f0       	breq	.+24     	; 0x594 <CALLBACK_USB_GetDescriptor+0x22>
     57c:	91 30       	cpi	r25, 0x01	; 1
     57e:	f9 f4       	brne	.+62     	; 0x5be <CALLBACK_USB_GetDescriptor+0x4c>
     580:	ec ea       	ldi	r30, 0xAC	; 172
     582:	f0 e0       	ldi	r31, 0x00	; 0
     584:	22 e1       	ldi	r18, 0x12	; 18
     586:	30 e0       	ldi	r19, 0x00	; 0
     588:	1e c0       	rjmp	.+60     	; 0x5c6 <CALLBACK_USB_GetDescriptor+0x54>
     58a:	ee eb       	ldi	r30, 0xBE	; 190
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	2e e3       	ldi	r18, 0x3E	; 62
     590:	30 e0       	ldi	r19, 0x00	; 0
     592:	19 c0       	rjmp	.+50     	; 0x5c6 <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
     594:	81 30       	cpi	r24, 0x01	; 1
     596:	49 f0       	breq	.+18     	; 0x5aa <CALLBACK_USB_GetDescriptor+0x38>
     598:	81 30       	cpi	r24, 0x01	; 1
     59a:	18 f0       	brcs	.+6      	; 0x5a2 <CALLBACK_USB_GetDescriptor+0x30>
     59c:	82 30       	cpi	r24, 0x02	; 2
     59e:	79 f4       	brne	.+30     	; 0x5be <CALLBACK_USB_GetDescriptor+0x4c>
     5a0:	08 c0       	rjmp	.+16     	; 0x5b2 <CALLBACK_USB_GetDescriptor+0x40>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     5a2:	ec ef       	ldi	r30, 0xFC	; 252
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	84 91       	lpm	r24, Z+
     5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     5aa:	e0 e0       	ldi	r30, 0x00	; 0
     5ac:	f1 e0       	ldi	r31, 0x01	; 1
     5ae:	84 91       	lpm	r24, Z+
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <CALLBACK_USB_GetDescriptor+0x46>
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     5b2:	ea e1       	ldi	r30, 0x1A	; 26
     5b4:	f1 e0       	ldi	r31, 0x01	; 1
     5b6:	84 91       	lpm	r24, Z+
     5b8:	28 2f       	mov	r18, r24
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <CALLBACK_USB_GetDescriptor+0x54>
     5be:	e0 e0       	ldi	r30, 0x00	; 0
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	20 e0       	ldi	r18, 0x00	; 0
     5c4:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
     5c6:	ed 93       	st	X+, r30
     5c8:	fc 93       	st	X, r31
	return Size;
}
     5ca:	c9 01       	movw	r24, r18
     5cc:	08 95       	ret

000005ce <Endpoint_ConfigureEndpoint_Prv>:
}

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number,
                                    const uint8_t UECFG0XData,
                                    const uint8_t UECFG1XData)
{
     5ce:	38 2f       	mov	r19, r24
     5d0:	28 2f       	mov	r18, r24
     5d2:	2e c0       	rjmp	.+92     	; 0x630 <Endpoint_ConfigureEndpoint_Prv+0x62>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     5d4:	82 2f       	mov	r24, r18
     5d6:	8f 70       	andi	r24, 0x0F	; 15
     5d8:	80 93 e9 00 	sts	0x00E9, r24
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
     5dc:	23 17       	cp	r18, r19
     5de:	21 f4       	brne	.+8      	; 0x5e8 <Endpoint_ConfigureEndpoint_Prv+0x1a>
     5e0:	76 2f       	mov	r23, r22
     5e2:	94 2f       	mov	r25, r20
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	06 c0       	rjmp	.+12     	; 0x5f4 <Endpoint_ConfigureEndpoint_Prv+0x26>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
     5e8:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
     5ec:	90 91 ed 00 	lds	r25, 0x00ED
			UEIENXTemp  = UEIENX;
     5f0:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
     5f4:	91 ff       	sbrs	r25, 1
     5f6:	1b c0       	rjmp	.+54     	; 0x62e <Endpoint_ConfigureEndpoint_Prv+0x60>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
     5f8:	80 91 eb 00 	lds	r24, 0x00EB
     5fc:	8e 7f       	andi	r24, 0xFE	; 254
     5fe:	80 93 eb 00 	sts	0x00EB, r24
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
     602:	80 91 ed 00 	lds	r24, 0x00ED
     606:	8d 7f       	andi	r24, 0xFD	; 253
     608:	80 93 ed 00 	sts	0x00ED, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
     60c:	80 91 eb 00 	lds	r24, 0x00EB
     610:	81 60       	ori	r24, 0x01	; 1
     612:	80 93 eb 00 	sts	0x00EB, r24

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
     616:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
     61a:	90 93 ed 00 	sts	0x00ED, r25
		UEIENX  = UEIENXTemp;
     61e:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
     622:	80 91 ee 00 	lds	r24, 0x00EE

		if (!(Endpoint_IsConfigured()))
     626:	87 fd       	sbrc	r24, 7
     628:	02 c0       	rjmp	.+4      	; 0x62e <Endpoint_ConfigureEndpoint_Prv+0x60>
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
     62e:	2f 5f       	subi	r18, 0xFF	; 255
     630:	27 30       	cpi	r18, 0x07	; 7
     632:	80 f2       	brcs	.-96     	; 0x5d4 <Endpoint_ConfigureEndpoint_Prv+0x6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     634:	3f 70       	andi	r19, 0x0F	; 15
     636:	30 93 e9 00 	sts	0x00E9, r19
     63a:	81 e0       	ldi	r24, 0x01	; 1
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
     63c:	08 95       	ret

0000063e <Endpoint_ConfigureEndpointTable>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
     63e:	0f 93       	push	r16
     640:	1f 93       	push	r17
     642:	cf 93       	push	r28
     644:	df 93       	push	r29
     646:	06 2f       	mov	r16, r22
     648:	ec 01       	movw	r28, r24
     64a:	10 e0       	ldi	r17, 0x00	; 0
     64c:	2a c0       	rjmp	.+84     	; 0x6a2 <Endpoint_ConfigureEndpointTable+0x64>
	for (uint8_t i = 0; i < Entries; i++)
	{
		if (!(Table[i].Address))
     64e:	98 81       	ld	r25, Y
     650:	99 23       	and	r25, r25
     652:	29 f1       	breq	.+74     	; 0x69e <Endpoint_ConfigureEndpointTable+0x60>
		  continue;
	
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
     654:	6b 81       	ldd	r22, Y+3	; 0x03
     656:	e9 81       	ldd	r30, Y+1	; 0x01
     658:	fa 81       	ldd	r31, Y+2	; 0x02
     65a:	2c 81       	ldd	r18, Y+4	; 0x04
			static inline bool Endpoint_ConfigureEndpoint(const uint8_t Address,
			                                              const uint8_t Type,
			                                              const uint16_t Size,
			                                              const uint8_t Banks)
			{
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
     65c:	89 2f       	mov	r24, r25
     65e:	8f 70       	andi	r24, 0x0F	; 15
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
     660:	87 30       	cpi	r24, 0x07	; 7
     662:	18 f5       	brcc	.+70     	; 0x6aa <Endpoint_ConfigureEndpointTable+0x6c>
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	10 f4       	brcc	.+4      	; 0x66c <Endpoint_ConfigureEndpointTable+0x2e>
     668:	52 e0       	ldi	r21, 0x02	; 2
     66a:	01 c0       	rjmp	.+2      	; 0x66e <Endpoint_ConfigureEndpointTable+0x30>
     66c:	56 e0       	ldi	r21, 0x06	; 6
     66e:	40 e0       	ldi	r20, 0x00	; 0
     670:	28 e0       	ldi	r18, 0x08	; 8
     672:	30 e0       	ldi	r19, 0x00	; 0
     674:	03 c0       	rjmp	.+6      	; 0x67c <Endpoint_ConfigureEndpointTable+0x3e>
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
				{
					MaskVal++;
     676:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
     678:	22 0f       	add	r18, r18
     67a:	33 1f       	adc	r19, r19
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;

				while (CheckBytes < Bytes)
     67c:	2e 17       	cp	r18, r30
     67e:	3f 07       	cpc	r19, r31
     680:	d0 f3       	brcs	.-12     	; 0x676 <Endpoint_ConfigureEndpointTable+0x38>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     682:	62 95       	swap	r22
     684:	66 0f       	add	r22, r22
     686:	66 0f       	add	r22, r22
     688:	60 7c       	andi	r22, 0xC0	; 192
     68a:	99 1f       	adc	r25, r25
     68c:	99 27       	eor	r25, r25
     68e:	99 1f       	adc	r25, r25
     690:	69 2b       	or	r22, r25
     692:	42 95       	swap	r20
     694:	40 7f       	andi	r20, 0xF0	; 240
     696:	45 2b       	or	r20, r21
     698:	9a df       	rcall	.-204    	; 0x5ce <Endpoint_ConfigureEndpoint_Prv>
     69a:	88 23       	and	r24, r24
     69c:	31 f0       	breq	.+12     	; 0x6aa <Endpoint_ConfigureEndpointTable+0x6c>
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
	for (uint8_t i = 0; i < Entries; i++)
     69e:	1f 5f       	subi	r17, 0xFF	; 255
     6a0:	25 96       	adiw	r28, 0x05	; 5
     6a2:	10 17       	cp	r17, r16
     6a4:	a0 f2       	brcs	.-88     	; 0x64e <Endpoint_ConfigureEndpointTable+0x10>
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <Endpoint_ConfigureEndpointTable+0x6e>
     6aa:	80 e0       	ldi	r24, 0x00	; 0
		if (!(Endpoint_ConfigureEndpoint(Table[i].Address, Table[i].Type, Table[i].Size, Table[i].Banks)))
		  return false;
	}
	
	return true;
}
     6ac:	df 91       	pop	r29
     6ae:	cf 91       	pop	r28
     6b0:	1f 91       	pop	r17
     6b2:	0f 91       	pop	r16
     6b4:	08 95       	ret

000006b6 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
     6b6:	80 91 90 02 	lds	r24, 0x0290
     6ba:	88 23       	and	r24, r24
     6bc:	8c f4       	brge	.+34     	; 0x6e0 <Endpoint_ClearStatusStage+0x2a>
     6be:	03 c0       	rjmp	.+6      	; 0x6c6 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6c0:	8e b3       	in	r24, 0x1e	; 30
     6c2:	88 23       	and	r24, r24
     6c4:	b1 f0       	breq	.+44     	; 0x6f2 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     6c6:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
     6ca:	82 ff       	sbrs	r24, 2
     6cc:	f9 cf       	rjmp	.-14     	; 0x6c0 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     6ce:	80 91 e8 00 	lds	r24, 0x00E8
     6d2:	8b 77       	andi	r24, 0x7B	; 123
     6d4:	80 93 e8 00 	sts	0x00E8, r24
     6d8:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
     6da:	8e b3       	in	r24, 0x1e	; 30
     6dc:	88 23       	and	r24, r24
     6de:	49 f0       	breq	.+18     	; 0x6f2 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     6e0:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
     6e4:	80 ff       	sbrs	r24, 0
     6e6:	f9 cf       	rjmp	.-14     	; 0x6da <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     6e8:	80 91 e8 00 	lds	r24, 0x00E8
     6ec:	8e 77       	andi	r24, 0x7E	; 126
     6ee:	80 93 e8 00 	sts	0x00E8, r24
     6f2:	08 95       	ret

000006f4 <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
     6f4:	40 91 e4 00 	lds	r20, 0x00E4
     6f8:	50 91 e5 00 	lds	r21, 0x00E5
     6fc:	24 e6       	ldi	r18, 0x64	; 100
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     6fe:	80 91 ec 00 	lds	r24, 0x00EC
     702:	80 ff       	sbrs	r24, 0
     704:	23 c0       	rjmp	.+70     	; 0x74c <Endpoint_WaitUntilReady+0x58>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     706:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
     70a:	80 fd       	sbrc	r24, 0
     70c:	1d c0       	rjmp	.+58     	; 0x748 <Endpoint_WaitUntilReady+0x54>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     70e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     710:	88 23       	and	r24, r24
     712:	11 f4       	brne	.+4      	; 0x718 <Endpoint_WaitUntilReady+0x24>
     714:	82 e0       	ldi	r24, 0x02	; 2
     716:	08 95       	ret
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     718:	85 30       	cpi	r24, 0x05	; 5
     71a:	11 f4       	brne	.+4      	; 0x720 <Endpoint_WaitUntilReady+0x2c>
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	08 95       	ret
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     720:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
     724:	85 ff       	sbrs	r24, 5
     726:	02 c0       	rjmp	.+4      	; 0x72c <Endpoint_WaitUntilReady+0x38>
     728:	81 e0       	ldi	r24, 0x01	; 1
     72a:	08 95       	ret
     72c:	80 91 e4 00 	lds	r24, 0x00E4
     730:	90 91 e5 00 	lds	r25, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
     734:	84 17       	cp	r24, r20
     736:	95 07       	cpc	r25, r21
     738:	11 f3       	breq	.-60     	; 0x6fe <Endpoint_WaitUntilReady+0xa>
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
     73a:	22 23       	and	r18, r18
     73c:	11 f4       	brne	.+4      	; 0x742 <Endpoint_WaitUntilReady+0x4e>
     73e:	84 e0       	ldi	r24, 0x04	; 4
     740:	08 95       	ret
     742:	21 50       	subi	r18, 0x01	; 1
     744:	ac 01       	movw	r20, r24
     746:	db cf       	rjmp	.-74     	; 0x6fe <Endpoint_WaitUntilReady+0xa>
     748:	80 e0       	ldi	r24, 0x00	; 0
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
     74a:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     74c:	80 91 e8 00 	lds	r24, 0x00E8
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
     750:	82 ff       	sbrs	r24, 2
     752:	dd cf       	rjmp	.-70     	; 0x70e <Endpoint_WaitUntilReady+0x1a>
     754:	f9 cf       	rjmp	.-14     	; 0x748 <Endpoint_WaitUntilReady+0x54>

00000756 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
     756:	ef 92       	push	r14
     758:	ff 92       	push	r15
     75a:	0f 93       	push	r16
     75c:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
     75e:	49 d0       	rcall	.+146    	; 0x7f2 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
     760:	50 d0       	rcall	.+160    	; 0x802 <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
     762:	08 ed       	ldi	r16, 0xD8	; 216
     764:	10 e0       	ldi	r17, 0x00	; 0
     766:	f8 01       	movw	r30, r16
     768:	80 81       	ld	r24, Z
     76a:	8f 77       	andi	r24, 0x7F	; 127
     76c:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
     76e:	80 81       	ld	r24, Z
     770:	80 68       	ori	r24, 0x80	; 128
     772:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     774:	80 81       	ld	r24, Z
     776:	8f 7d       	andi	r24, 0xDF	; 223
     778:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     77a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
     77c:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
     77e:	10 92 8c 02 	sts	0x028C, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
     782:	10 92 8e 02 	sts	0x028E, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
     786:	10 92 8d 02 	sts	0x028D, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
     78a:	80 ee       	ldi	r24, 0xE0	; 224
     78c:	e8 2e       	mov	r14, r24
     78e:	f1 2c       	mov	r15, r1
     790:	f7 01       	movw	r30, r14
     792:	80 81       	ld	r24, Z
     794:	8b 7f       	andi	r24, 0xFB	; 251
     796:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
     798:	f8 01       	movw	r30, r16
     79a:	80 81       	ld	r24, Z
     79c:	81 60       	ori	r24, 0x01	; 1
     79e:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	60 e0       	ldi	r22, 0x00	; 0
     7a4:	42 e0       	ldi	r20, 0x02	; 2
     7a6:	13 df       	rcall	.-474    	; 0x5ce <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     7a8:	e1 ee       	ldi	r30, 0xE1	; 225
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	80 81       	ld	r24, Z
     7ae:	8e 7f       	andi	r24, 0xFE	; 254
     7b0:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     7b2:	e2 ee       	ldi	r30, 0xE2	; 226
     7b4:	f0 e0       	ldi	r31, 0x00	; 0
     7b6:	80 81       	ld	r24, Z
     7b8:	81 60       	ori	r24, 0x01	; 1
     7ba:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
     7bc:	80 81       	ld	r24, Z
     7be:	88 60       	ori	r24, 0x08	; 8
     7c0:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
     7c2:	f7 01       	movw	r30, r14
     7c4:	80 81       	ld	r24, Z
     7c6:	8e 7f       	andi	r24, 0xFE	; 254
     7c8:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
     7ca:	f8 01       	movw	r30, r16
     7cc:	80 81       	ld	r24, Z
     7ce:	80 61       	ori	r24, 0x10	; 16
     7d0:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
     7d2:	1f 91       	pop	r17
     7d4:	0f 91       	pop	r16
     7d6:	ff 90       	pop	r15
     7d8:	ef 90       	pop	r14
     7da:	08 95       	ret

000007dc <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
     7dc:	e7 ed       	ldi	r30, 0xD7	; 215
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 81       	ld	r24, Z
     7e2:	81 60       	ori	r24, 0x01	; 1
     7e4:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
     7e6:	84 e0       	ldi	r24, 0x04	; 4
     7e8:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
     7ea:	81 e0       	ldi	r24, 0x01	; 1
     7ec:	80 93 8f 02 	sts	0x028F, r24

	USB_ResetInterface();
}
     7f0:	b2 cf       	rjmp	.-156    	; 0x756 <USB_ResetInterface>

000007f2 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
     7f2:	e8 ed       	ldi	r30, 0xD8	; 216
     7f4:	f0 e0       	ldi	r31, 0x00	; 0
     7f6:	80 81       	ld	r24, Z
     7f8:	8e 7f       	andi	r24, 0xFE	; 254
     7fa:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
     7fc:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
     800:	08 95       	ret

00000802 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
     802:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
     806:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
     80a:	08 95       	ret

0000080c <__vector_11>:
	#endif
}

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
     80c:	1f 92       	push	r1
     80e:	0f 92       	push	r0
     810:	0f b6       	in	r0, 0x3f	; 63
     812:	0f 92       	push	r0
     814:	11 24       	eor	r1, r1
     816:	1f 93       	push	r17
     818:	2f 93       	push	r18
     81a:	3f 93       	push	r19
     81c:	4f 93       	push	r20
     81e:	5f 93       	push	r21
     820:	6f 93       	push	r22
     822:	7f 93       	push	r23
     824:	8f 93       	push	r24
     826:	9f 93       	push	r25
     828:	af 93       	push	r26
     82a:	bf 93       	push	r27
     82c:	ef 93       	push	r30
     82e:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     830:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     834:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     838:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
     83c:	80 91 f0 00 	lds	r24, 0x00F0
     840:	87 7f       	andi	r24, 0xF7	; 247
     842:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
     846:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
     848:	a8 d1       	rcall	.+848    	; 0xb9a <USB_Device_ProcessControlRequest>
     84a:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     84e:	80 91 f0 00 	lds	r24, 0x00F0
     852:	88 60       	ori	r24, 0x08	; 8
     854:	80 93 f0 00 	sts	0x00F0, r24
     858:	1f 70       	andi	r17, 0x0F	; 15
     85a:	10 93 e9 00 	sts	0x00E9, r17

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
     85e:	ff 91       	pop	r31
     860:	ef 91       	pop	r30
     862:	bf 91       	pop	r27
     864:	af 91       	pop	r26
     866:	9f 91       	pop	r25
     868:	8f 91       	pop	r24
     86a:	7f 91       	pop	r23
     86c:	6f 91       	pop	r22
     86e:	5f 91       	pop	r21
     870:	4f 91       	pop	r20
     872:	3f 91       	pop	r19
     874:	2f 91       	pop	r18
     876:	1f 91       	pop	r17
     878:	0f 90       	pop	r0
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	0f 90       	pop	r0
     87e:	1f 90       	pop	r1
     880:	18 95       	reti

00000882 <__vector_10>:
	UDINT  = 0;
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
     882:	1f 92       	push	r1
     884:	0f 92       	push	r0
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	0f 92       	push	r0
     88a:	11 24       	eor	r1, r1
     88c:	2f 93       	push	r18
     88e:	3f 93       	push	r19
     890:	4f 93       	push	r20
     892:	5f 93       	push	r21
     894:	6f 93       	push	r22
     896:	7f 93       	push	r23
     898:	8f 93       	push	r24
     89a:	9f 93       	push	r25
     89c:	af 93       	push	r26
     89e:	bf 93       	push	r27
     8a0:	ef 93       	push	r30
     8a2:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
     8a4:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
     8a8:	82 ff       	sbrs	r24, 2
     8aa:	0a c0       	rjmp	.+20     	; 0x8c0 <__vector_10+0x3e>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
     8ac:	80 91 e2 00 	lds	r24, 0x00E2
     8b0:	82 ff       	sbrs	r24, 2
     8b2:	06 c0       	rjmp	.+12     	; 0x8c0 <__vector_10+0x3e>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
     8b4:	80 91 e1 00 	lds	r24, 0x00E1
     8b8:	8b 7f       	andi	r24, 0xFB	; 251
     8ba:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
     8be:	d6 d2       	rcall	.+1452   	; 0xe6c <USB_Event_Stub>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
     8c0:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
     8c4:	80 ff       	sbrs	r24, 0
     8c6:	1a c0       	rjmp	.+52     	; 0x8fc <__vector_10+0x7a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
     8c8:	80 91 d8 00 	lds	r24, 0x00D8
     8cc:	80 ff       	sbrs	r24, 0
     8ce:	16 c0       	rjmp	.+44     	; 0x8fc <__vector_10+0x7a>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
     8d0:	80 91 da 00 	lds	r24, 0x00DA
     8d4:	8e 7f       	andi	r24, 0xFE	; 254
     8d6:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
     8da:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
     8de:	80 ff       	sbrs	r24, 0
     8e0:	0a c0       	rjmp	.+20     	; 0x8f6 <__vector_10+0x74>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     8e2:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     8e4:	82 e0       	ldi	r24, 0x02	; 2
     8e6:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
     8e8:	09 b4       	in	r0, 0x29	; 41
     8ea:	00 fe       	sbrs	r0, 0
     8ec:	fd cf       	rjmp	.-6      	; 0x8e8 <__vector_10+0x66>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
     8f2:	a6 dc       	rcall	.-1716   	; 0x240 <EVENT_USB_Device_Connect>
     8f4:	03 c0       	rjmp	.+6      	; 0x8fc <__vector_10+0x7a>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     8f6:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
     8f8:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
     8fa:	a3 dc       	rcall	.-1722   	; 0x242 <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
     8fc:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
     900:	80 ff       	sbrs	r24, 0
     902:	17 c0       	rjmp	.+46     	; 0x932 <__vector_10+0xb0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
     904:	80 91 e2 00 	lds	r24, 0x00E2
     908:	80 ff       	sbrs	r24, 0
     90a:	13 c0       	rjmp	.+38     	; 0x932 <__vector_10+0xb0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     90c:	80 91 e2 00 	lds	r24, 0x00E2
     910:	8e 7f       	andi	r24, 0xFE	; 254
     912:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     916:	80 91 e2 00 	lds	r24, 0x00E2
     91a:	80 61       	ori	r24, 0x10	; 16
     91c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
     920:	80 91 d8 00 	lds	r24, 0x00D8
     924:	80 62       	ori	r24, 0x20	; 32
     926:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
     92a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
     92c:	85 e0       	ldi	r24, 0x05	; 5
     92e:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
     930:	9d d2       	rcall	.+1338   	; 0xe6c <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
     932:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
     936:	84 ff       	sbrs	r24, 4
     938:	2b c0       	rjmp	.+86     	; 0x990 <__vector_10+0x10e>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
     93a:	80 91 e2 00 	lds	r24, 0x00E2
     93e:	84 ff       	sbrs	r24, 4
     940:	27 c0       	rjmp	.+78     	; 0x990 <__vector_10+0x10e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
     942:	19 bc       	out	0x29, r1	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
     948:	09 b4       	in	r0, 0x29	; 41
     94a:	00 fe       	sbrs	r0, 0
     94c:	fd cf       	rjmp	.-6      	; 0x948 <__vector_10+0xc6>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
     94e:	80 91 d8 00 	lds	r24, 0x00D8
     952:	8f 7d       	andi	r24, 0xDF	; 223
     954:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
     958:	80 91 e1 00 	lds	r24, 0x00E1
     95c:	8f 7e       	andi	r24, 0xEF	; 239
     95e:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
     962:	80 91 e2 00 	lds	r24, 0x00E2
     966:	8f 7e       	andi	r24, 0xEF	; 239
     968:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
     96c:	80 91 e2 00 	lds	r24, 0x00E2
     970:	81 60       	ori	r24, 0x01	; 1
     972:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
     976:	80 91 8c 02 	lds	r24, 0x028C
     97a:	88 23       	and	r24, r24
     97c:	31 f4       	brne	.+12     	; 0x98a <__vector_10+0x108>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     97e:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     982:	87 fd       	sbrc	r24, 7
     984:	02 c0       	rjmp	.+4      	; 0x98a <__vector_10+0x108>
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	01 c0       	rjmp	.+2      	; 0x98c <__vector_10+0x10a>
     98a:	84 e0       	ldi	r24, 0x04	; 4
     98c:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
     98e:	6e d2       	rcall	.+1244   	; 0xe6c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
     990:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
     994:	83 ff       	sbrs	r24, 3
     996:	26 c0       	rjmp	.+76     	; 0x9e4 <__vector_10+0x162>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
     998:	80 91 e2 00 	lds	r24, 0x00E2
     99c:	83 ff       	sbrs	r24, 3
     99e:	22 c0       	rjmp	.+68     	; 0x9e4 <__vector_10+0x162>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
     9a0:	80 91 e1 00 	lds	r24, 0x00E1
     9a4:	87 7f       	andi	r24, 0xF7	; 247
     9a6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
     9aa:	82 e0       	ldi	r24, 0x02	; 2
     9ac:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
     9ae:	10 92 8c 02 	sts	0x028C, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
     9b2:	80 91 e1 00 	lds	r24, 0x00E1
     9b6:	8e 7f       	andi	r24, 0xFE	; 254
     9b8:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
     9bc:	80 91 e2 00 	lds	r24, 0x00E2
     9c0:	8e 7f       	andi	r24, 0xFE	; 254
     9c2:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
     9c6:	80 91 e2 00 	lds	r24, 0x00E2
     9ca:	80 61       	ori	r24, 0x10	; 16
     9cc:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
     9d0:	80 e0       	ldi	r24, 0x00	; 0
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	42 e0       	ldi	r20, 0x02	; 2
     9d6:	fb dd       	rcall	.-1034   	; 0x5ce <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
     9d8:	80 91 f0 00 	lds	r24, 0x00F0
     9dc:	88 60       	ori	r24, 0x08	; 8
     9de:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
     9e2:	44 d2       	rcall	.+1160   	; 0xe6c <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
     9e4:	ff 91       	pop	r31
     9e6:	ef 91       	pop	r30
     9e8:	bf 91       	pop	r27
     9ea:	af 91       	pop	r26
     9ec:	9f 91       	pop	r25
     9ee:	8f 91       	pop	r24
     9f0:	7f 91       	pop	r23
     9f2:	6f 91       	pop	r22
     9f4:	5f 91       	pop	r21
     9f6:	4f 91       	pop	r20
     9f8:	3f 91       	pop	r19
     9fa:	2f 91       	pop	r18
     9fc:	0f 90       	pop	r0
     9fe:	0f be       	out	0x3f, r0	; 63
     a00:	0f 90       	pop	r0
     a02:	1f 90       	pop	r1
     a04:	18 95       	reti

00000a06 <Endpoint_Write_Control_Stream_LE>:
     a06:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     a08:	40 91 96 02 	lds	r20, 0x0296
     a0c:	50 91 97 02 	lds	r21, 0x0297
     a10:	46 17       	cp	r20, r22
     a12:	57 07       	cpc	r21, r23
     a14:	18 f4       	brcc	.+6      	; 0xa1c <Endpoint_Write_Control_Stream_LE+0x16>

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     a16:	f9 01       	movw	r30, r18
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	44 c0       	rjmp	.+136    	; 0xaa4 <Endpoint_Write_Control_Stream_LE+0x9e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     a1c:	61 15       	cp	r22, r1
     a1e:	71 05       	cpc	r23, r1
     a20:	11 f0       	breq	.+4      	; 0xa26 <Endpoint_Write_Control_Stream_LE+0x20>
     a22:	ab 01       	movw	r20, r22
     a24:	f8 cf       	rjmp	.-16     	; 0xa16 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a26:	80 91 e8 00 	lds	r24, 0x00E8
     a2a:	8e 77       	andi	r24, 0x7E	; 126
     a2c:	80 93 e8 00 	sts	0x00E8, r24
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	50 e0       	ldi	r21, 0x00	; 0
     a34:	f0 cf       	rjmp	.-32     	; 0xa16 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     a36:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     a38:	88 23       	and	r24, r24
     a3a:	09 f4       	brne	.+2      	; 0xa3e <Endpoint_Write_Control_Stream_LE+0x38>
     a3c:	44 c0       	rjmp	.+136    	; 0xac6 <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     a3e:	85 30       	cpi	r24, 0x05	; 5
     a40:	09 f4       	brne	.+2      	; 0xa44 <Endpoint_Write_Control_Stream_LE+0x3e>
     a42:	43 c0       	rjmp	.+134    	; 0xaca <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     a44:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     a48:	83 ff       	sbrs	r24, 3
     a4a:	02 c0       	rjmp	.+4      	; 0xa50 <Endpoint_Write_Control_Stream_LE+0x4a>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     a50:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     a54:	82 fd       	sbrc	r24, 2
     a56:	31 c0       	rjmp	.+98     	; 0xaba <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     a58:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     a5c:	80 ff       	sbrs	r24, 0
     a5e:	22 c0       	rjmp	.+68     	; 0xaa4 <Endpoint_Write_Control_Stream_LE+0x9e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     a60:	80 91 f3 00 	lds	r24, 0x00F3
     a64:	90 91 f2 00 	lds	r25, 0x00F2
     a68:	78 2f       	mov	r23, r24
     a6a:	60 e0       	ldi	r22, 0x00	; 0
     a6c:	29 2f       	mov	r18, r25
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	26 2b       	or	r18, r22
     a72:	37 2b       	or	r19, r23
     a74:	07 c0       	rjmp	.+14     	; 0xa84 <Endpoint_Write_Control_Stream_LE+0x7e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     a76:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     a78:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
     a7c:	41 50       	subi	r20, 0x01	; 1
     a7e:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     a80:	2f 5f       	subi	r18, 0xFF	; 255
     a82:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     a84:	41 15       	cp	r20, r1
     a86:	51 05       	cpc	r21, r1
     a88:	19 f0       	breq	.+6      	; 0xa90 <Endpoint_Write_Control_Stream_LE+0x8a>
     a8a:	28 30       	cpi	r18, 0x08	; 8
     a8c:	31 05       	cpc	r19, r1
     a8e:	98 f3       	brcs	.-26     	; 0xa76 <Endpoint_Write_Control_Stream_LE+0x70>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	28 30       	cpi	r18, 0x08	; 8
     a94:	31 05       	cpc	r19, r1
     a96:	09 f4       	brne	.+2      	; 0xa9a <Endpoint_Write_Control_Stream_LE+0x94>
     a98:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     a9a:	80 91 e8 00 	lds	r24, 0x00E8
     a9e:	8e 77       	andi	r24, 0x7E	; 126
     aa0:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     aa4:	41 15       	cp	r20, r1
     aa6:	51 05       	cpc	r21, r1
     aa8:	31 f6       	brne	.-116    	; 0xa36 <Endpoint_Write_Control_Stream_LE+0x30>
     aaa:	99 23       	and	r25, r25
     aac:	21 f6       	brne	.-120    	; 0xa36 <Endpoint_Write_Control_Stream_LE+0x30>
     aae:	05 c0       	rjmp	.+10     	; 0xaba <Endpoint_Write_Control_Stream_LE+0xb4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     ab0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     ab2:	88 23       	and	r24, r24
     ab4:	41 f0       	breq	.+16     	; 0xac6 <Endpoint_Write_Control_Stream_LE+0xc0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     ab6:	85 30       	cpi	r24, 0x05	; 5
     ab8:	41 f0       	breq	.+16     	; 0xaca <Endpoint_Write_Control_Stream_LE+0xc4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     aba:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     abe:	82 ff       	sbrs	r24, 2
     ac0:	f7 cf       	rjmp	.-18     	; 0xab0 <Endpoint_Write_Control_Stream_LE+0xaa>
     ac2:	80 e0       	ldi	r24, 0x00	; 0
     ac4:	08 95       	ret
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	08 95       	ret
     aca:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     acc:	08 95       	ret

00000ace <Endpoint_Write_Control_PStream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
     ace:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
     ad0:	40 91 96 02 	lds	r20, 0x0296
     ad4:	50 91 97 02 	lds	r21, 0x0297
     ad8:	46 17       	cp	r20, r22
     ada:	57 07       	cpc	r21, r23
     adc:	18 f4       	brcc	.+6      	; 0xae4 <Endpoint_Write_Control_PStream_LE+0x16>

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
     ade:	f9 01       	movw	r30, r18
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	45 c0       	rjmp	.+138    	; 0xb6e <__stack+0x6f>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
     ae4:	61 15       	cp	r22, r1
     ae6:	71 05       	cpc	r23, r1
     ae8:	11 f0       	breq	.+4      	; 0xaee <Endpoint_Write_Control_PStream_LE+0x20>
     aea:	ab 01       	movw	r20, r22
     aec:	f8 cf       	rjmp	.-16     	; 0xade <Endpoint_Write_Control_PStream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     aee:	80 91 e8 00 	lds	r24, 0x00E8
     af2:	8e 77       	andi	r24, 0x7E	; 126
     af4:	80 93 e8 00 	sts	0x00E8, r24
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e0       	ldi	r21, 0x00	; 0
     afc:	f0 cf       	rjmp	.-32     	; 0xade <Endpoint_Write_Control_PStream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     afe:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b00:	88 23       	and	r24, r24
     b02:	09 f4       	brne	.+2      	; 0xb06 <__stack+0x7>
     b04:	46 c0       	rjmp	.+140    	; 0xb92 <__stack+0x93>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b06:	85 30       	cpi	r24, 0x05	; 5
     b08:	09 f4       	brne	.+2      	; 0xb0c <__stack+0xd>
     b0a:	45 c0       	rjmp	.+138    	; 0xb96 <__stack+0x97>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     b0c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
     b10:	83 ff       	sbrs	r24, 3
     b12:	02 c0       	rjmp	.+4      	; 0xb18 <__stack+0x19>
     b14:	81 e0       	ldi	r24, 0x01	; 1
     b16:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b18:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
     b1c:	82 fd       	sbrc	r24, 2
     b1e:	33 c0       	rjmp	.+102    	; 0xb86 <__stack+0x87>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     b20:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
     b24:	80 ff       	sbrs	r24, 0
     b26:	23 c0       	rjmp	.+70     	; 0xb6e <__stack+0x6f>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     b28:	80 91 f3 00 	lds	r24, 0x00F3
     b2c:	90 91 f2 00 	lds	r25, 0x00F2
     b30:	78 2f       	mov	r23, r24
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	29 2f       	mov	r18, r25
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	26 2b       	or	r18, r22
     b3a:	37 2b       	or	r19, r23
     b3c:	08 c0       	rjmp	.+16     	; 0xb4e <__stack+0x4f>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
     b3e:	84 91       	lpm	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     b40:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
     b44:	31 96       	adiw	r30, 0x01	; 1
				Length--;
     b46:	41 50       	subi	r20, 0x01	; 1
     b48:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
     b4a:	2f 5f       	subi	r18, 0xFF	; 255
     b4c:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
     b4e:	41 15       	cp	r20, r1
     b50:	51 05       	cpc	r21, r1
     b52:	19 f0       	breq	.+6      	; 0xb5a <__stack+0x5b>
     b54:	28 30       	cpi	r18, 0x08	; 8
     b56:	31 05       	cpc	r19, r1
     b58:	90 f3       	brcs	.-28     	; 0xb3e <__stack+0x3f>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	28 30       	cpi	r18, 0x08	; 8
     b5e:	31 05       	cpc	r19, r1
     b60:	09 f4       	brne	.+2      	; 0xb64 <__stack+0x65>
     b62:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     b64:	80 91 e8 00 	lds	r24, 0x00E8
     b68:	8e 77       	andi	r24, 0x7E	; 126
     b6a:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
     b6e:	41 15       	cp	r20, r1
     b70:	51 05       	cpc	r21, r1
     b72:	29 f6       	brne	.-118    	; 0xafe <Endpoint_Write_Control_PStream_LE+0x30>
     b74:	99 23       	and	r25, r25
     b76:	09 f0       	breq	.+2      	; 0xb7a <__stack+0x7b>
     b78:	c2 cf       	rjmp	.-124    	; 0xafe <Endpoint_Write_Control_PStream_LE+0x30>
     b7a:	05 c0       	rjmp	.+10     	; 0xb86 <__stack+0x87>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
     b7c:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
     b7e:	88 23       	and	r24, r24
     b80:	41 f0       	breq	.+16     	; 0xb92 <__stack+0x93>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
     b82:	85 30       	cpi	r24, 0x05	; 5
     b84:	41 f0       	breq	.+16     	; 0xb96 <__stack+0x97>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     b86:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
     b8a:	82 ff       	sbrs	r24, 2
     b8c:	f7 cf       	rjmp	.-18     	; 0xb7c <__stack+0x7d>
     b8e:	80 e0       	ldi	r24, 0x00	; 0
     b90:	08 95       	ret
     b92:	82 e0       	ldi	r24, 0x02	; 2
     b94:	08 95       	ret
     b96:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
     b98:	08 95       	ret

00000b9a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	df 93       	push	r29
     ba0:	cf 93       	push	r28
     ba2:	cd b7       	in	r28, 0x3d	; 61
     ba4:	de b7       	in	r29, 0x3e	; 62
     ba6:	ac 97       	sbiw	r28, 0x2c	; 44
     ba8:	0f b6       	in	r0, 0x3f	; 63
     baa:	f8 94       	cli
     bac:	de bf       	out	0x3e, r29	; 62
     bae:	0f be       	out	0x3f, r0	; 63
     bb0:	cd bf       	out	0x3d, r28	; 61
     bb2:	e0 e9       	ldi	r30, 0x90	; 144
     bb4:	f2 e0       	ldi	r31, 0x02	; 2
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     bb6:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
     bba:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
     bbc:	22 e0       	ldi	r18, 0x02	; 2
     bbe:	e8 39       	cpi	r30, 0x98	; 152
     bc0:	f2 07       	cpc	r31, r18
     bc2:	c9 f7       	brne	.-14     	; 0xbb6 <USB_Device_ProcessControlRequest+0x1c>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
     bc4:	c3 db       	rcall	.-2170   	; 0x34c <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     bc6:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
     bca:	83 ff       	sbrs	r24, 3
     bcc:	36 c1       	rjmp	.+620    	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
     bce:	80 91 90 02 	lds	r24, 0x0290

		switch (USB_ControlRequest.bRequest)
     bd2:	30 91 91 02 	lds	r19, 0x0291
     bd6:	35 30       	cpi	r19, 0x05	; 5
     bd8:	09 f4       	brne	.+2      	; 0xbdc <USB_Device_ProcessControlRequest+0x42>
     bda:	87 c0       	rjmp	.+270    	; 0xcea <USB_Device_ProcessControlRequest+0x150>
     bdc:	36 30       	cpi	r19, 0x06	; 6
     bde:	40 f4       	brcc	.+16     	; 0xbf0 <USB_Device_ProcessControlRequest+0x56>
     be0:	31 30       	cpi	r19, 0x01	; 1
     be2:	c9 f1       	breq	.+114    	; 0xc56 <USB_Device_ProcessControlRequest+0xbc>
     be4:	31 30       	cpi	r19, 0x01	; 1
     be6:	70 f0       	brcs	.+28     	; 0xc04 <USB_Device_ProcessControlRequest+0x6a>
     be8:	33 30       	cpi	r19, 0x03	; 3
     bea:	09 f0       	breq	.+2      	; 0xbee <USB_Device_ProcessControlRequest+0x54>
     bec:	26 c1       	rjmp	.+588    	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
     bee:	33 c0       	rjmp	.+102    	; 0xc56 <USB_Device_ProcessControlRequest+0xbc>
     bf0:	38 30       	cpi	r19, 0x08	; 8
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <USB_Device_ProcessControlRequest+0x5c>
     bf4:	f5 c0       	rjmp	.+490    	; 0xde0 <USB_Device_ProcessControlRequest+0x246>
     bf6:	39 30       	cpi	r19, 0x09	; 9
     bf8:	09 f4       	brne	.+2      	; 0xbfc <USB_Device_ProcessControlRequest+0x62>
     bfa:	04 c1       	rjmp	.+520    	; 0xe04 <USB_Device_ProcessControlRequest+0x26a>
     bfc:	36 30       	cpi	r19, 0x06	; 6
     bfe:	09 f0       	breq	.+2      	; 0xc02 <USB_Device_ProcessControlRequest+0x68>
     c00:	1c c1       	rjmp	.+568    	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
     c02:	96 c0       	rjmp	.+300    	; 0xd30 <USB_Device_ProcessControlRequest+0x196>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c04:	80 38       	cpi	r24, 0x80	; 128
     c06:	21 f0       	breq	.+8      	; 0xc10 <USB_Device_ProcessControlRequest+0x76>
     c08:	82 38       	cpi	r24, 0x82	; 130
     c0a:	09 f0       	breq	.+2      	; 0xc0e <USB_Device_ProcessControlRequest+0x74>
     c0c:	16 c1       	rjmp	.+556    	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
     c0e:	08 c0       	rjmp	.+16     	; 0xc20 <USB_Device_ProcessControlRequest+0x86>
     c10:	90 91 8d 02 	lds	r25, 0x028D
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
     c14:	80 91 8e 02 	lds	r24, 0x028E
     c18:	88 23       	and	r24, r24
     c1a:	99 f0       	breq	.+38     	; 0xc42 <USB_Device_ProcessControlRequest+0xa8>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
     c1c:	92 60       	ori	r25, 0x02	; 2
     c1e:	11 c0       	rjmp	.+34     	; 0xc42 <USB_Device_ProcessControlRequest+0xa8>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c20:	80 91 94 02 	lds	r24, 0x0294
     c24:	8f 70       	andi	r24, 0x0F	; 15
     c26:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
     c2a:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	25 e0       	ldi	r18, 0x05	; 5
     c32:	96 95       	lsr	r25
     c34:	87 95       	ror	r24
     c36:	2a 95       	dec	r18
     c38:	e1 f7       	brne	.-8      	; 0xc32 <USB_Device_ProcessControlRequest+0x98>
     c3a:	98 2f       	mov	r25, r24
     c3c:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c3e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     c42:	80 91 e8 00 	lds	r24, 0x00E8
     c46:	87 7f       	andi	r24, 0xF7	; 247
     c48:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
     c4c:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
     c50:	10 92 f1 00 	sts	0x00F1, r1
     c54:	d0 c0       	rjmp	.+416    	; 0xdf6 <USB_Device_ProcessControlRequest+0x25c>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     c56:	88 23       	and	r24, r24
     c58:	19 f0       	breq	.+6      	; 0xc60 <USB_Device_ProcessControlRequest+0xc6>
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	09 f0       	breq	.+2      	; 0xc60 <USB_Device_ProcessControlRequest+0xc6>
     c5e:	ed c0       	rjmp	.+474    	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
     c60:	90 e0       	ldi	r25, 0x00	; 0
     c62:	8f 71       	andi	r24, 0x1F	; 31
     c64:	90 70       	andi	r25, 0x00	; 0
     c66:	00 97       	sbiw	r24, 0x00	; 0
     c68:	21 f0       	breq	.+8      	; 0xc72 <USB_Device_ProcessControlRequest+0xd8>
     c6a:	02 97       	sbiw	r24, 0x02	; 2
     c6c:	09 f0       	breq	.+2      	; 0xc70 <USB_Device_ProcessControlRequest+0xd6>
     c6e:	e5 c0       	rjmp	.+458    	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
     c70:	0c c0       	rjmp	.+24     	; 0xc8a <USB_Device_ProcessControlRequest+0xf0>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
     c72:	80 91 92 02 	lds	r24, 0x0292
     c76:	81 30       	cpi	r24, 0x01	; 1
     c78:	09 f0       	breq	.+2      	; 0xc7c <USB_Device_ProcessControlRequest+0xe2>
     c7a:	df c0       	rjmp	.+446    	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
     c7c:	10 92 8e 02 	sts	0x028E, r1
     c80:	33 30       	cpi	r19, 0x03	; 3
     c82:	69 f5       	brne	.+90     	; 0xcde <USB_Device_ProcessControlRequest+0x144>
     c84:	80 93 8e 02 	sts	0x028E, r24
     c88:	2a c0       	rjmp	.+84     	; 0xcde <USB_Device_ProcessControlRequest+0x144>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
     c8a:	80 91 92 02 	lds	r24, 0x0292
     c8e:	88 23       	and	r24, r24
     c90:	31 f5       	brne	.+76     	; 0xcde <USB_Device_ProcessControlRequest+0x144>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
     c92:	20 91 94 02 	lds	r18, 0x0294
     c96:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
     c98:	09 f4       	brne	.+2      	; 0xc9c <USB_Device_ProcessControlRequest+0x102>
     c9a:	cf c0       	rjmp	.+414    	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     c9c:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
     ca0:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
     ca4:	80 ff       	sbrs	r24, 0
     ca6:	1b c0       	rjmp	.+54     	; 0xcde <USB_Device_ProcessControlRequest+0x144>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
     ca8:	33 30       	cpi	r19, 0x03	; 3
     caa:	21 f4       	brne	.+8      	; 0xcb4 <USB_Device_ProcessControlRequest+0x11a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     cac:	80 91 eb 00 	lds	r24, 0x00EB
     cb0:	80 62       	ori	r24, 0x20	; 32
     cb2:	13 c0       	rjmp	.+38     	; 0xcda <USB_Device_ProcessControlRequest+0x140>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
     cb4:	80 91 eb 00 	lds	r24, 0x00EB
     cb8:	80 61       	ori	r24, 0x10	; 16
     cba:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <USB_Device_ProcessControlRequest+0x12e>
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	2a 95       	dec	r18
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <USB_Device_ProcessControlRequest+0x12a>
     ccc:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
     cd0:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
     cd4:	80 91 eb 00 	lds	r24, 0x00EB
     cd8:	88 60       	ori	r24, 0x08	; 8
     cda:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     cde:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     ce2:	80 91 e8 00 	lds	r24, 0x00E8
     ce6:	87 7f       	andi	r24, 0xF7	; 247
     ce8:	89 c0       	rjmp	.+274    	; 0xdfc <USB_Device_ProcessControlRequest+0x262>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     cea:	88 23       	and	r24, r24
     cec:	09 f0       	breq	.+2      	; 0xcf0 <USB_Device_ProcessControlRequest+0x156>
     cee:	a5 c0       	rjmp	.+330    	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
     cf0:	10 91 92 02 	lds	r17, 0x0292
     cf4:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     cf6:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     cf8:	f8 94       	cli
     cfa:	80 91 e8 00 	lds	r24, 0x00E8
     cfe:	87 7f       	andi	r24, 0xF7	; 247
     d00:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
     d04:	d8 dc       	rcall	.-1616   	; 0x6b6 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
     d06:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
     d0a:	80 ff       	sbrs	r24, 0
     d0c:	fc cf       	rjmp	.-8      	; 0xd06 <USB_Device_ProcessControlRequest+0x16c>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
     d0e:	80 91 e3 00 	lds	r24, 0x00E3
     d12:	80 78       	andi	r24, 0x80	; 128
     d14:	81 2b       	or	r24, r17

				UDADDR = Temp;
     d16:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
     d1a:	80 68       	ori	r24, 0x80	; 128
     d1c:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
     d20:	11 23       	and	r17, r17
     d22:	11 f4       	brne	.+4      	; 0xd28 <USB_Device_ProcessControlRequest+0x18e>
     d24:	82 e0       	ldi	r24, 0x02	; 2
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <USB_Device_ProcessControlRequest+0x190>
     d28:	83 e0       	ldi	r24, 0x03	; 3
     d2a:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d2c:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
     d2e:	85 c0       	rjmp	.+266    	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
     d30:	80 58       	subi	r24, 0x80	; 128
     d32:	82 30       	cpi	r24, 0x02	; 2
     d34:	08 f0       	brcs	.+2      	; 0xd38 <USB_Device_ProcessControlRequest+0x19e>
     d36:	81 c0       	rjmp	.+258    	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
     d38:	80 91 92 02 	lds	r24, 0x0292
     d3c:	90 91 93 02 	lds	r25, 0x0293
     d40:	23 e0       	ldi	r18, 0x03	; 3
     d42:	8c 3d       	cpi	r24, 0xDC	; 220
     d44:	92 07       	cpc	r25, r18
     d46:	09 f0       	breq	.+2      	; 0xd4a <USB_Device_ProcessControlRequest+0x1b0>
     d48:	33 c0       	rjmp	.+102    	; 0xdb0 <USB_Device_ProcessControlRequest+0x216>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
     d4e:	8a e2       	ldi	r24, 0x2A	; 42
     d50:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
     d52:	7f b7       	in	r23, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
     d54:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
     d56:	de 01       	movw	r26, r28
     d58:	15 96       	adiw	r26, 0x05	; 5
     d5a:	6e e0       	ldi	r22, 0x0E	; 14
     d5c:	40 e0       	ldi	r20, 0x00	; 0
     d5e:	50 e0       	ldi	r21, 0x00	; 0

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
     d60:	11 e2       	ldi	r17, 0x21	; 33
     d62:	e6 2f       	mov	r30, r22
     d64:	f0 e0       	ldi	r31, 0x00	; 0
     d66:	10 93 57 00 	sts	0x0057, r17
     d6a:	84 91       	lpm	r24, Z+

					if (SerialCharNum & 0x01)
     d6c:	40 ff       	sbrs	r20, 0
     d6e:	03 c0       	rjmp	.+6      	; 0xd76 <USB_Device_ProcessControlRequest+0x1dc>
					{
						SerialByte >>= 4;
     d70:	82 95       	swap	r24
     d72:	8f 70       	andi	r24, 0x0F	; 15
						SigReadAddress++;
     d74:	6f 5f       	subi	r22, 0xFF	; 255
					}

					SerialByte &= 0x0F;
     d76:	8f 70       	andi	r24, 0x0F	; 15
     d78:	28 2f       	mov	r18, r24
     d7a:	30 e0       	ldi	r19, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
     d7c:	8a 30       	cpi	r24, 0x0A	; 10
     d7e:	18 f0       	brcs	.+6      	; 0xd86 <USB_Device_ProcessControlRequest+0x1ec>
     d80:	c9 01       	movw	r24, r18
     d82:	c7 96       	adiw	r24, 0x37	; 55
     d84:	02 c0       	rjmp	.+4      	; 0xd8a <USB_Device_ProcessControlRequest+0x1f0>
     d86:	c9 01       	movw	r24, r18
     d88:	c0 96       	adiw	r24, 0x30	; 48
     d8a:	8d 93       	st	X+, r24
     d8c:	9d 93       	st	X+, r25
     d8e:	4f 5f       	subi	r20, 0xFF	; 255
     d90:	5f 4f       	sbci	r21, 0xFF	; 255
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
     d92:	44 31       	cpi	r20, 0x14	; 20
     d94:	51 05       	cpc	r21, r1
     d96:	29 f7       	brne	.-54     	; 0xd62 <USB_Device_ProcessControlRequest+0x1c8>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
     d98:	7f bf       	out	0x3f, r23	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     d9a:	80 91 e8 00 	lds	r24, 0x00E8
     d9e:	87 7f       	andi	r24, 0xF7	; 247
     da0:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
     da4:	ce 01       	movw	r24, r28
     da6:	03 96       	adiw	r24, 0x03	; 3
     da8:	6a e2       	ldi	r22, 0x2A	; 42
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	2c de       	rcall	.-936    	; 0xa06 <Endpoint_Write_Control_Stream_LE>
     dae:	12 c0       	rjmp	.+36     	; 0xdd4 <USB_Device_ProcessControlRequest+0x23a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
     db0:	60 91 94 02 	lds	r22, 0x0294
     db4:	ae 01       	movw	r20, r28
     db6:	4f 5f       	subi	r20, 0xFF	; 255
     db8:	5f 4f       	sbci	r21, 0xFF	; 255
     dba:	db db       	rcall	.-2122   	; 0x572 <CALLBACK_USB_GetDescriptor>
     dbc:	bc 01       	movw	r22, r24
     dbe:	00 97       	sbiw	r24, 0x00	; 0
     dc0:	09 f4       	brne	.+2      	; 0xdc4 <USB_Device_ProcessControlRequest+0x22a>
     dc2:	3b c0       	rjmp	.+118    	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
     dc4:	80 91 e8 00 	lds	r24, 0x00E8
     dc8:	87 7f       	andi	r24, 0xF7	; 247
     dca:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
     dce:	89 81       	ldd	r24, Y+1	; 0x01
     dd0:	9a 81       	ldd	r25, Y+2	; 0x02
     dd2:	7d de       	rcall	.-774    	; 0xace <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     dd4:	80 91 e8 00 	lds	r24, 0x00E8
     dd8:	8b 77       	andi	r24, 0x7B	; 123
     dda:	80 93 e8 00 	sts	0x00E8, r24
     dde:	2d c0       	rjmp	.+90     	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
     de0:	80 38       	cpi	r24, 0x80	; 128
     de2:	59 f5       	brne	.+86     	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     de4:	80 91 e8 00 	lds	r24, 0x00E8
     de8:	87 7f       	andi	r24, 0xF7	; 247
     dea:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
     dee:	80 91 8c 02 	lds	r24, 0x028C
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     df2:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     df6:	80 91 e8 00 	lds	r24, 0x00E8
     dfa:	8e 77       	andi	r24, 0x7E	; 126
     dfc:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
     e00:	5a dc       	rcall	.-1868   	; 0x6b6 <Endpoint_ClearStatusStage>
     e02:	1b c0       	rjmp	.+54     	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
     e04:	88 23       	and	r24, r24
     e06:	c9 f4       	brne	.+50     	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
     e08:	90 91 92 02 	lds	r25, 0x0292
     e0c:	92 30       	cpi	r25, 0x02	; 2
     e0e:	a8 f4       	brcc	.+42     	; 0xe3a <USB_Device_ProcessControlRequest+0x2a0>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e10:	80 91 e8 00 	lds	r24, 0x00E8
     e14:	87 7f       	andi	r24, 0xF7	; 247
     e16:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
     e1a:	90 93 8c 02 	sts	0x028C, r25

	Endpoint_ClearStatusStage();
     e1e:	4b dc       	rcall	.-1898   	; 0x6b6 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
     e20:	80 91 8c 02 	lds	r24, 0x028C
     e24:	88 23       	and	r24, r24
     e26:	31 f4       	brne	.+12     	; 0xe34 <USB_Device_ProcessControlRequest+0x29a>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
     e28:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
     e2c:	87 fd       	sbrc	r24, 7
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <USB_Device_ProcessControlRequest+0x29a>
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	01 c0       	rjmp	.+2      	; 0xe36 <USB_Device_ProcessControlRequest+0x29c>
     e34:	84 e0       	ldi	r24, 0x04	; 4
     e36:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
     e38:	8c da       	rcall	.-2792   	; 0x352 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e3a:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
     e3e:	83 ff       	sbrs	r24, 3
     e40:	0a c0       	rjmp	.+20     	; 0xe56 <USB_Device_ProcessControlRequest+0x2bc>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
     e42:	80 91 eb 00 	lds	r24, 0x00EB
     e46:	80 62       	ori	r24, 0x20	; 32
     e48:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
     e4c:	80 91 e8 00 	lds	r24, 0x00E8
     e50:	87 7f       	andi	r24, 0xF7	; 247
     e52:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
     e56:	ac 96       	adiw	r28, 0x2c	; 44
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	1f 91       	pop	r17
     e68:	0f 91       	pop	r16
     e6a:	08 95       	ret

00000e6c <USB_Event_Stub>:

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{

}
     e6c:	08 95       	ret

00000e6e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
     e6e:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
     e70:	8e b3       	in	r24, 0x1e	; 30
     e72:	88 23       	and	r24, r24
     e74:	71 f0       	breq	.+28     	; 0xe92 <USB_USBTask+0x24>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
     e76:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
     e7a:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e7e:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
     e82:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
     e86:	83 ff       	sbrs	r24, 3
     e88:	01 c0       	rjmp	.+2      	; 0xe8c <USB_USBTask+0x1e>
		  USB_Device_ProcessControlRequest();
     e8a:	87 de       	rcall	.-754    	; 0xb9a <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     e8c:	1f 70       	andi	r17, 0x0F	; 15
     e8e:	10 93 e9 00 	sts	0x00E9, r17
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
     e92:	1f 91       	pop	r17
     e94:	08 95       	ret

00000e96 <CDC_Device_ReceiveByte>:

int16_t CDC_Device_ReceiveByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     e96:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     e98:	8e b3       	in	r24, 0x1e	; 30
     e9a:	84 30       	cpi	r24, 0x04	; 4
     e9c:	99 f5       	brne	.+102    	; 0xf04 <CDC_Device_ReceiveByte+0x6e>
     e9e:	84 89       	ldd	r24, Z+20	; 0x14
     ea0:	95 89       	ldd	r25, Z+21	; 0x15
     ea2:	a6 89       	ldd	r26, Z+22	; 0x16
     ea4:	b7 89       	ldd	r27, Z+23	; 0x17
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	a1 05       	cpc	r26, r1
     eaa:	b1 05       	cpc	r27, r1
     eac:	59 f1       	breq	.+86     	; 0xf04 <CDC_Device_ReceiveByte+0x6e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     eae:	86 81       	ldd	r24, Z+6	; 0x06
     eb0:	8f 70       	andi	r24, 0x0F	; 15
     eb2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
     eb6:	80 91 e8 00 	lds	r24, 0x00E8

	int16_t ReceivedByte = -1;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataOUTEndpoint.Address);

	if (Endpoint_IsOUTReceived())
     eba:	82 ff       	sbrs	r24, 2
     ebc:	23 c0       	rjmp	.+70     	; 0xf04 <CDC_Device_ReceiveByte+0x6e>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     ebe:	40 91 f3 00 	lds	r20, 0x00F3
     ec2:	20 91 f2 00 	lds	r18, 0x00F2
	{
		if (Endpoint_BytesInEndpoint())
     ec6:	94 2f       	mov	r25, r20
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	30 e0       	ldi	r19, 0x00	; 0
     ecc:	82 2b       	or	r24, r18
     ece:	93 2b       	or	r25, r19
     ed0:	89 2b       	or	r24, r25
     ed2:	19 f4       	brne	.+6      	; 0xeda <CDC_Device_ReceiveByte+0x44>
     ed4:	6f ef       	ldi	r22, 0xFF	; 255
     ed6:	7f ef       	ldi	r23, 0xFF	; 255
     ed8:	04 c0       	rjmp	.+8      	; 0xee2 <CDC_Device_ReceiveByte+0x4c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
     eda:	80 91 f1 00 	lds	r24, 0x00F1
		  ReceivedByte = Endpoint_Read_8();
     ede:	68 2f       	mov	r22, r24
     ee0:	70 e0       	ldi	r23, 0x00	; 0
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     ee2:	40 91 f3 00 	lds	r20, 0x00F3
     ee6:	20 91 f2 00 	lds	r18, 0x00F2

		if (!(Endpoint_BytesInEndpoint()))
     eea:	94 2f       	mov	r25, r20
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	30 e0       	ldi	r19, 0x00	; 0
     ef0:	82 2b       	or	r24, r18
     ef2:	93 2b       	or	r25, r19
     ef4:	89 2b       	or	r24, r25
     ef6:	41 f4       	brne	.+16     	; 0xf08 <CDC_Device_ReceiveByte+0x72>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
     ef8:	80 91 e8 00 	lds	r24, 0x00E8
     efc:	8b 77       	andi	r24, 0x7B	; 123
     efe:	80 93 e8 00 	sts	0x00E8, r24
     f02:	02 c0       	rjmp	.+4      	; 0xf08 <CDC_Device_ReceiveByte+0x72>
     f04:	6f ef       	ldi	r22, 0xFF	; 255
     f06:	7f ef       	ldi	r23, 0xFF	; 255
		  Endpoint_ClearOUT();
	}

	return ReceivedByte;
}
     f08:	cb 01       	movw	r24, r22
     f0a:	08 95       	ret

00000f0c <CDC_Device_Event_Stub>:

// cppcheck-suppress unusedFunction
void CDC_Device_Event_Stub(void)
{

}
     f0c:	08 95       	ret

00000f0e <CDC_Device_Flush>:
	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
}

uint8_t CDC_Device_Flush(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f0e:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f10:	8e b3       	in	r24, 0x1e	; 30
     f12:	84 30       	cpi	r24, 0x04	; 4
     f14:	51 f5       	brne	.+84     	; 0xf6a <CDC_Device_Flush+0x5c>
     f16:	84 89       	ldd	r24, Z+20	; 0x14
     f18:	95 89       	ldd	r25, Z+21	; 0x15
     f1a:	a6 89       	ldd	r26, Z+22	; 0x16
     f1c:	b7 89       	ldd	r27, Z+23	; 0x17
     f1e:	00 97       	sbiw	r24, 0x00	; 0
     f20:	a1 05       	cpc	r26, r1
     f22:	b1 05       	cpc	r27, r1
     f24:	11 f1       	breq	.+68     	; 0xf6a <CDC_Device_Flush+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     f26:	81 81       	ldd	r24, Z+1	; 0x01
     f28:	8f 70       	andi	r24, 0x0F	; 15
     f2a:	80 93 e9 00 	sts	0x00E9, r24
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR) || defined(__AVR_ATmega32U6__)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
     f2e:	40 91 f3 00 	lds	r20, 0x00F3
     f32:	20 91 f2 00 	lds	r18, 0x00F2

	uint8_t ErrorCode;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_BytesInEndpoint()))
     f36:	94 2f       	mov	r25, r20
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	82 2b       	or	r24, r18
     f3e:	93 2b       	or	r25, r19
     f40:	89 2b       	or	r24, r25
     f42:	a9 f0       	breq	.+42     	; 0xf6e <CDC_Device_Flush+0x60>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     f44:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     f48:	80 91 e8 00 	lds	r24, 0x00E8
     f4c:	8e 77       	andi	r24, 0x7E	; 126
     f4e:	80 93 e8 00 	sts	0x00E8, r24

	bool BankFull = !(Endpoint_IsReadWriteAllowed());

	Endpoint_ClearIN();

	if (BankFull)
     f52:	95 fd       	sbrc	r25, 5
     f54:	0c c0       	rjmp	.+24     	; 0xf6e <CDC_Device_Flush+0x60>
	{
		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     f56:	ce db       	rcall	.-2148   	; 0x6f4 <Endpoint_WaitUntilReady>
     f58:	98 2f       	mov	r25, r24
     f5a:	88 23       	and	r24, r24
     f5c:	49 f4       	brne	.+18     	; 0xf70 <CDC_Device_Flush+0x62>
     f5e:	80 91 e8 00 	lds	r24, 0x00E8
     f62:	8e 77       	andi	r24, 0x7E	; 126
     f64:	80 93 e8 00 	sts	0x00E8, r24
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <CDC_Device_Flush+0x62>
     f6a:	92 e0       	ldi	r25, 0x02	; 2
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <CDC_Device_Flush+0x62>
     f6e:	90 e0       	ldi	r25, 0x00	; 0

		Endpoint_ClearIN();
	}

	return ENDPOINT_READYWAIT_NoError;
}
     f70:	89 2f       	mov	r24, r25
     f72:	08 95       	ret

00000f74 <CDC_Device_USBTask>:

	return true;
}

void CDC_Device_USBTask(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     f74:	fc 01       	movw	r30, r24
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f76:	8e b3       	in	r24, 0x1e	; 30
     f78:	84 30       	cpi	r24, 0x04	; 4
     f7a:	51 f4       	brne	.+20     	; 0xf90 <CDC_Device_USBTask+0x1c>
     f7c:	84 89       	ldd	r24, Z+20	; 0x14
     f7e:	95 89       	ldd	r25, Z+21	; 0x15
     f80:	a6 89       	ldd	r26, Z+22	; 0x16
     f82:	b7 89       	ldd	r27, Z+23	; 0x17
     f84:	00 97       	sbiw	r24, 0x00	; 0
     f86:	a1 05       	cpc	r26, r1
     f88:	b1 05       	cpc	r27, r1
     f8a:	11 f0       	breq	.+4      	; 0xf90 <CDC_Device_USBTask+0x1c>
	  return;

	#if !defined(NO_CLASS_DRIVER_AUTOFLUSH)
	CDC_Device_Flush(CDCInterfaceInfo);
     f8c:	cf 01       	movw	r24, r30
     f8e:	bf cf       	rjmp	.-130    	; 0xf0e <CDC_Device_Flush>
     f90:	08 95       	ret

00000f92 <CDC_Device_SendByte>:
	return Endpoint_Write_Stream_LE(Buffer, Length, NULL);
}

uint8_t CDC_Device_SendByte(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo,
                            const uint8_t Data)
{
     f92:	1f 93       	push	r17
     f94:	fc 01       	movw	r30, r24
     f96:	16 2f       	mov	r17, r22
	if ((USB_DeviceState != DEVICE_STATE_Configured) || !(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS))
     f98:	8e b3       	in	r24, 0x1e	; 30
     f9a:	84 30       	cpi	r24, 0x04	; 4
     f9c:	e1 f4       	brne	.+56     	; 0xfd6 <CDC_Device_SendByte+0x44>
     f9e:	84 89       	ldd	r24, Z+20	; 0x14
     fa0:	95 89       	ldd	r25, Z+21	; 0x15
     fa2:	a6 89       	ldd	r26, Z+22	; 0x16
     fa4:	b7 89       	ldd	r27, Z+23	; 0x17
     fa6:	00 97       	sbiw	r24, 0x00	; 0
     fa8:	a1 05       	cpc	r26, r1
     faa:	b1 05       	cpc	r27, r1
     fac:	a1 f0       	breq	.+40     	; 0xfd6 <CDC_Device_SendByte+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
     fae:	81 81       	ldd	r24, Z+1	; 0x01
     fb0:	8f 70       	andi	r24, 0x0F	; 15
     fb2:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
     fb6:	80 91 e8 00 	lds	r24, 0x00E8
	  return ENDPOINT_RWSTREAM_DeviceDisconnected;

	Endpoint_SelectEndpoint(CDCInterfaceInfo->Config.DataINEndpoint.Address);

	if (!(Endpoint_IsReadWriteAllowed()))
     fba:	85 fd       	sbrc	r24, 5
     fbc:	08 c0       	rjmp	.+16     	; 0xfce <CDC_Device_SendByte+0x3c>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
     fbe:	80 91 e8 00 	lds	r24, 0x00E8
     fc2:	8e 77       	andi	r24, 0x7E	; 126
     fc4:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_ClearIN();

		uint8_t ErrorCode;

		if ((ErrorCode = Endpoint_WaitUntilReady()) != ENDPOINT_READYWAIT_NoError)
     fc8:	95 db       	rcall	.-2262   	; 0x6f4 <Endpoint_WaitUntilReady>
     fca:	88 23       	and	r24, r24
     fcc:	29 f4       	brne	.+10     	; 0xfd8 <CDC_Device_SendByte+0x46>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
     fce:	10 93 f1 00 	sts	0x00F1, r17
     fd2:	80 e0       	ldi	r24, 0x00	; 0
     fd4:	01 c0       	rjmp	.+2      	; 0xfd8 <CDC_Device_SendByte+0x46>
		  return ErrorCode;
	}

	Endpoint_Write_8(Data);
	return ENDPOINT_READYWAIT_NoError;
     fd6:	82 e0       	ldi	r24, 0x02	; 2
}
     fd8:	1f 91       	pop	r17
     fda:	08 95       	ret

00000fdc <CDC_Device_ConfigureEndpoints>:
			break;
	}
}

bool CDC_Device_ConfigureEndpoints(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
     fdc:	cf 93       	push	r28
     fde:	df 93       	push	r29
     fe0:	ec 01       	movw	r28, r24
	memset(&CDCInterfaceInfo->State, 0x00, sizeof(CDCInterfaceInfo->State));
     fe2:	40 96       	adiw	r24, 0x10	; 16
     fe4:	fc 01       	movw	r30, r24
     fe6:	8b e0       	ldi	r24, 0x0B	; 11
     fe8:	df 01       	movw	r26, r30
     fea:	1d 92       	st	X+, r1
     fec:	8a 95       	dec	r24
     fee:	e9 f7       	brne	.-6      	; 0xfea <CDC_Device_ConfigureEndpoints+0xe>

	CDCInterfaceInfo->Config.DataINEndpoint.Type       = EP_TYPE_BULK;
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	8c 83       	std	Y+4, r24	; 0x04
	CDCInterfaceInfo->Config.DataOUTEndpoint.Type      = EP_TYPE_BULK;
     ff4:	89 87       	std	Y+9, r24	; 0x09
	CDCInterfaceInfo->Config.NotificationEndpoint.Type = EP_TYPE_INTERRUPT;
     ff6:	83 e0       	ldi	r24, 0x03	; 3
     ff8:	8e 87       	std	Y+14, r24	; 0x0e

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataINEndpoint, 1)))
     ffa:	ce 01       	movw	r24, r28
     ffc:	01 96       	adiw	r24, 0x01	; 1
     ffe:	61 e0       	ldi	r22, 0x01	; 1
    1000:	1e db       	rcall	.-2500   	; 0x63e <Endpoint_ConfigureEndpointTable>
    1002:	88 23       	and	r24, r24
    1004:	71 f0       	breq	.+28     	; 0x1022 <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.DataOUTEndpoint, 1)))
    1006:	ce 01       	movw	r24, r28
    1008:	06 96       	adiw	r24, 0x06	; 6
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	18 db       	rcall	.-2512   	; 0x63e <Endpoint_ConfigureEndpointTable>
    100e:	88 23       	and	r24, r24
    1010:	41 f0       	breq	.+16     	; 0x1022 <CDC_Device_ConfigureEndpoints+0x46>
	  return false;

	if (!(Endpoint_ConfigureEndpointTable(&CDCInterfaceInfo->Config.NotificationEndpoint, 1)))
    1012:	ce 01       	movw	r24, r28
    1014:	0b 96       	adiw	r24, 0x0b	; 11
    1016:	61 e0       	ldi	r22, 0x01	; 1
    1018:	12 db       	rcall	.-2524   	; 0x63e <Endpoint_ConfigureEndpointTable>
    101a:	88 23       	and	r24, r24
    101c:	19 f0       	breq	.+6      	; 0x1024 <CDC_Device_ConfigureEndpoints+0x48>
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	01 c0       	rjmp	.+2      	; 0x1024 <CDC_Device_ConfigureEndpoints+0x48>
    1022:	80 e0       	ldi	r24, 0x00	; 0
	  return false;

	return true;
}
    1024:	df 91       	pop	r29
    1026:	cf 91       	pop	r28
    1028:	08 95       	ret

0000102a <CDC_Device_ProcessControlRequest>:
#define  __INCLUDE_FROM_CDC_DRIVER
#define  __INCLUDE_FROM_CDC_DEVICE_C
#include "CDCClassDevice.h"

void CDC_Device_ProcessControlRequest(USB_ClassInfo_CDC_Device_t* const CDCInterfaceInfo)
{
    102a:	cf 93       	push	r28
    102c:	df 93       	push	r29
    102e:	ec 01       	movw	r28, r24
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1030:	80 91 e8 00 	lds	r24, 0x00E8
	if (!(Endpoint_IsSETUPReceived()))
    1034:	83 ff       	sbrs	r24, 3
    1036:	a2 c0       	rjmp	.+324    	; 0x117c <CDC_Device_ProcessControlRequest+0x152>
	  return;

	if (USB_ControlRequest.wIndex != CDCInterfaceInfo->Config.ControlInterfaceNumber)
    1038:	88 81       	ld	r24, Y
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	20 91 94 02 	lds	r18, 0x0294
    1040:	30 91 95 02 	lds	r19, 0x0295
    1044:	28 17       	cp	r18, r24
    1046:	39 07       	cpc	r19, r25
    1048:	09 f0       	breq	.+2      	; 0x104c <CDC_Device_ProcessControlRequest+0x22>
    104a:	98 c0       	rjmp	.+304    	; 0x117c <CDC_Device_ProcessControlRequest+0x152>
	  return;

	switch (USB_ControlRequest.bRequest)
    104c:	80 91 91 02 	lds	r24, 0x0291
    1050:	81 32       	cpi	r24, 0x21	; 33
    1052:	69 f0       	breq	.+26     	; 0x106e <CDC_Device_ProcessControlRequest+0x44>
    1054:	82 32       	cpi	r24, 0x22	; 34
    1056:	20 f4       	brcc	.+8      	; 0x1060 <CDC_Device_ProcessControlRequest+0x36>
    1058:	80 32       	cpi	r24, 0x20	; 32
    105a:	09 f0       	breq	.+2      	; 0x105e <CDC_Device_ProcessControlRequest+0x34>
    105c:	8f c0       	rjmp	.+286    	; 0x117c <CDC_Device_ProcessControlRequest+0x152>
    105e:	3c c0       	rjmp	.+120    	; 0x10d8 <CDC_Device_ProcessControlRequest+0xae>
    1060:	82 32       	cpi	r24, 0x22	; 34
    1062:	09 f4       	brne	.+2      	; 0x1066 <CDC_Device_ProcessControlRequest+0x3c>
    1064:	6a c0       	rjmp	.+212    	; 0x113a <CDC_Device_ProcessControlRequest+0x110>
    1066:	83 32       	cpi	r24, 0x23	; 35
    1068:	09 f0       	breq	.+2      	; 0x106c <CDC_Device_ProcessControlRequest+0x42>
    106a:	88 c0       	rjmp	.+272    	; 0x117c <CDC_Device_ProcessControlRequest+0x152>
    106c:	79 c0       	rjmp	.+242    	; 0x1160 <CDC_Device_ProcessControlRequest+0x136>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    106e:	80 91 90 02 	lds	r24, 0x0290
    1072:	81 3a       	cpi	r24, 0xA1	; 161
    1074:	09 f0       	breq	.+2      	; 0x1078 <CDC_Device_ProcessControlRequest+0x4e>
    1076:	82 c0       	rjmp	.+260    	; 0x117c <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1078:	80 91 e8 00 	lds	r24, 0x00E8
    107c:	87 7f       	andi	r24, 0xF7	; 247
    107e:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1082:	80 91 e8 00 	lds	r24, 0x00E8
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsINReady()));
    1086:	80 ff       	sbrs	r24, 0
    1088:	fc cf       	rjmp	.-8      	; 0x1082 <CDC_Device_ProcessControlRequest+0x58>

				Endpoint_Write_32_LE(CDCInterfaceInfo->State.LineEncoding.BaudRateBPS);
    108a:	8c 89       	ldd	r24, Y+20	; 0x14
    108c:	9d 89       	ldd	r25, Y+21	; 0x15
    108e:	ae 89       	ldd	r26, Y+22	; 0x16
    1090:	bf 89       	ldd	r27, Y+23	; 0x17
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_32_LE(const uint32_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_32_LE(const uint32_t Data)
			{
				UEDATX = (Data &  0xFF);
    1092:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1096:	29 2f       	mov	r18, r25
    1098:	3a 2f       	mov	r19, r26
    109a:	4b 2f       	mov	r20, r27
    109c:	55 27       	eor	r21, r21
    109e:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 16);
    10a2:	9d 01       	movw	r18, r26
    10a4:	44 27       	eor	r20, r20
    10a6:	55 27       	eor	r21, r21
    10a8:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (Data >> 24);
    10ac:	8b 2f       	mov	r24, r27
    10ae:	99 27       	eor	r25, r25
    10b0:	aa 27       	eor	r26, r26
    10b2:	bb 27       	eor	r27, r27
    10b4:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.CharFormat);
    10b8:	88 8d       	ldd	r24, Y+24	; 0x18
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    10ba:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.ParityType);
    10be:	89 8d       	ldd	r24, Y+25	; 0x19
    10c0:	80 93 f1 00 	sts	0x00F1, r24
				Endpoint_Write_8(CDCInterfaceInfo->State.LineEncoding.DataBits);
    10c4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    10c6:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    10ca:	80 91 e8 00 	lds	r24, 0x00E8
    10ce:	8e 77       	andi	r24, 0x7E	; 126
    10d0:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearIN();
				Endpoint_ClearStatusStage();
    10d4:	f0 da       	rcall	.-2592   	; 0x6b6 <Endpoint_ClearStatusStage>
    10d6:	52 c0       	rjmp	.+164    	; 0x117c <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    10d8:	80 91 90 02 	lds	r24, 0x0290
    10dc:	81 32       	cpi	r24, 0x21	; 33
    10de:	09 f0       	breq	.+2      	; 0x10e2 <CDC_Device_ProcessControlRequest+0xb8>
    10e0:	4d c0       	rjmp	.+154    	; 0x117c <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    10e2:	80 91 e8 00 	lds	r24, 0x00E8
    10e6:	87 7f       	andi	r24, 0xF7	; 247
    10e8:	80 93 e8 00 	sts	0x00E8, r24
    10ec:	04 c0       	rjmp	.+8      	; 0x10f6 <CDC_Device_ProcessControlRequest+0xcc>
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
    10ee:	8e b3       	in	r24, 0x1e	; 30
    10f0:	88 23       	and	r24, r24
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <CDC_Device_ProcessControlRequest+0xcc>
    10f4:	43 c0       	rjmp	.+134    	; 0x117c <CDC_Device_ProcessControlRequest+0x152>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    10f6:	80 91 e8 00 	lds	r24, 0x00E8
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				while (!(Endpoint_IsOUTReceived()))
    10fa:	82 ff       	sbrs	r24, 2
    10fc:	f8 cf       	rjmp	.-16     	; 0x10ee <CDC_Device_ProcessControlRequest+0xc4>
				{
					uint32_t Value;
					uint8_t  Bytes[4];
				} Data;

				Data.Bytes[0] = UEDATX;
    10fe:	80 91 f1 00 	lds	r24, 0x00F1
				Data.Bytes[1] = UEDATX;
    1102:	90 91 f1 00 	lds	r25, 0x00F1
				Data.Bytes[2] = UEDATX;
    1106:	20 91 f1 00 	lds	r18, 0x00F1
				Data.Bytes[3] = UEDATX;
    110a:	30 91 f1 00 	lds	r19, 0x00F1
				{
					if (USB_DeviceState == DEVICE_STATE_Unattached)
					  return;
				}
				
				CDCInterfaceInfo->State.LineEncoding.BaudRateBPS = Endpoint_Read_32_LE();
    110e:	8c 8b       	std	Y+20, r24	; 0x14
    1110:	9d 8b       	std	Y+21, r25	; 0x15
    1112:	2e 8b       	std	Y+22, r18	; 0x16
    1114:	3f 8b       	std	Y+23, r19	; 0x17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1116:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.CharFormat  = Endpoint_Read_8();
    111a:	88 8f       	std	Y+24, r24	; 0x18
    111c:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.ParityType  = Endpoint_Read_8();
    1120:	89 8f       	std	Y+25, r24	; 0x19
    1122:	80 91 f1 00 	lds	r24, 0x00F1
				CDCInterfaceInfo->State.LineEncoding.DataBits    = Endpoint_Read_8();
    1126:	8a 8f       	std	Y+26, r24	; 0x1a
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1128:	80 91 e8 00 	lds	r24, 0x00E8
    112c:	8b 77       	andi	r24, 0x7B	; 123
    112e:	80 93 e8 00 	sts	0x00E8, r24

				Endpoint_ClearOUT();
				Endpoint_ClearStatusStage();
    1132:	c1 da       	rcall	.-2686   	; 0x6b6 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_LineEncodingChanged(CDCInterfaceInfo);
    1134:	ce 01       	movw	r24, r28
    1136:	b0 d8       	rcall	.-3744   	; 0x298 <EVENT_CDC_Device_LineEncodingChanged>
    1138:	21 c0       	rjmp	.+66     	; 0x117c <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SetControlLineState:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    113a:	80 91 90 02 	lds	r24, 0x0290
    113e:	81 32       	cpi	r24, 0x21	; 33
    1140:	e9 f4       	brne	.+58     	; 0x117c <CDC_Device_ProcessControlRequest+0x152>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1142:	80 91 e8 00 	lds	r24, 0x00E8
    1146:	87 7f       	andi	r24, 0xF7	; 247
    1148:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    114c:	b4 da       	rcall	.-2712   	; 0x6b6 <Endpoint_ClearStatusStage>

				CDCInterfaceInfo->State.ControlLineStates.HostToDevice = USB_ControlRequest.wValue;
    114e:	80 91 92 02 	lds	r24, 0x0292
    1152:	90 91 93 02 	lds	r25, 0x0293
    1156:	99 8b       	std	Y+17, r25	; 0x11
    1158:	88 8b       	std	Y+16, r24	; 0x10

				EVENT_CDC_Device_ControLineStateChanged(CDCInterfaceInfo);
    115a:	ce 01       	movw	r24, r28
    115c:	d7 de       	rcall	.-594    	; 0xf0c <CDC_Device_Event_Stub>
    115e:	0e c0       	rjmp	.+28     	; 0x117c <CDC_Device_ProcessControlRequest+0x152>
			}

			break;
		case CDC_REQ_SendBreak:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1160:	80 91 90 02 	lds	r24, 0x0290
    1164:	81 32       	cpi	r24, 0x21	; 33
    1166:	51 f4       	brne	.+20     	; 0x117c <CDC_Device_ProcessControlRequest+0x152>
    1168:	80 91 e8 00 	lds	r24, 0x00E8
    116c:	87 7f       	andi	r24, 0xF7	; 247
    116e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();
				Endpoint_ClearStatusStage();
    1172:	a1 da       	rcall	.-2750   	; 0x6b6 <Endpoint_ClearStatusStage>

				EVENT_CDC_Device_BreakSent(CDCInterfaceInfo, (uint8_t)USB_ControlRequest.wValue);
    1174:	ce 01       	movw	r24, r28
    1176:	60 91 92 02 	lds	r22, 0x0292
    117a:	c8 de       	rcall	.-624    	; 0xf0c <CDC_Device_Event_Stub>
			}

			break;
	}
}
    117c:	df 91       	pop	r29
    117e:	cf 91       	pop	r28
    1180:	08 95       	ret

00001182 <__udivmodsi4>:
    1182:	a1 e2       	ldi	r26, 0x21	; 33
    1184:	1a 2e       	mov	r1, r26
    1186:	aa 1b       	sub	r26, r26
    1188:	bb 1b       	sub	r27, r27
    118a:	fd 01       	movw	r30, r26
    118c:	0d c0       	rjmp	.+26     	; 0x11a8 <__udivmodsi4_ep>

0000118e <__udivmodsi4_loop>:
    118e:	aa 1f       	adc	r26, r26
    1190:	bb 1f       	adc	r27, r27
    1192:	ee 1f       	adc	r30, r30
    1194:	ff 1f       	adc	r31, r31
    1196:	a2 17       	cp	r26, r18
    1198:	b3 07       	cpc	r27, r19
    119a:	e4 07       	cpc	r30, r20
    119c:	f5 07       	cpc	r31, r21
    119e:	20 f0       	brcs	.+8      	; 0x11a8 <__udivmodsi4_ep>
    11a0:	a2 1b       	sub	r26, r18
    11a2:	b3 0b       	sbc	r27, r19
    11a4:	e4 0b       	sbc	r30, r20
    11a6:	f5 0b       	sbc	r31, r21

000011a8 <__udivmodsi4_ep>:
    11a8:	66 1f       	adc	r22, r22
    11aa:	77 1f       	adc	r23, r23
    11ac:	88 1f       	adc	r24, r24
    11ae:	99 1f       	adc	r25, r25
    11b0:	1a 94       	dec	r1
    11b2:	69 f7       	brne	.-38     	; 0x118e <__udivmodsi4_loop>
    11b4:	60 95       	com	r22
    11b6:	70 95       	com	r23
    11b8:	80 95       	com	r24
    11ba:	90 95       	com	r25
    11bc:	9b 01       	movw	r18, r22
    11be:	ac 01       	movw	r20, r24
    11c0:	bd 01       	movw	r22, r26
    11c2:	cf 01       	movw	r24, r30
    11c4:	08 95       	ret

000011c6 <_exit>:
    11c6:	f8 94       	cli

000011c8 <__stop_program>:
    11c8:	ff cf       	rjmp	.-2      	; 0x11c8 <__stop_program>
